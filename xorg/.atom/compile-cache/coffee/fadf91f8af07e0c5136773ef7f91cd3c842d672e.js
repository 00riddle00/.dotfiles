(function() {
  var InsertTableView;

  InsertTableView = require("../../lib/views/insert-table-view");

  describe("InsertTableView", function() {
    var insertTableView;
    insertTableView = null;
    beforeEach(function() {
      return insertTableView = new InsertTableView({});
    });
    it("validates table rows/columns", function() {
      expect(insertTableView.isValidRange(1, 1)).toBe(false);
      return expect(insertTableView.isValidRange(2, 2)).toBe(true);
    });
    describe("tableExtraPipes disabled", function() {
      it("create correct (2,2) table", function() {
        var table;
        table = insertTableView.createTable(2, 2);
        return expect(table).toEqual(["  |  ", "--|--", "  |  "].join("\n"));
      });
      return it("create correct (3,4) table", function() {
        var table;
        table = insertTableView.createTable(3, 4);
        return expect(table).toEqual(["  |   |   |  ", "--|---|---|--", "  |   |   |  ", "  |   |   |  "].join("\n"));
      });
    });
    describe("tableExtraPipes enabled", function() {
      beforeEach(function() {
        return atom.config.set("markdown-writer.tableExtraPipes", true);
      });
      it("create correct (2,2) table", function() {
        var table;
        table = insertTableView.createTable(2, 2);
        return expect(table).toEqual(["|   |   |", "|---|---|", "|   |   |"].join("\n"));
      });
      return it("create correct (3,4) table", function() {
        var table;
        table = insertTableView.createTable(3, 4);
        return expect(table).toEqual(["|   |   |   |   |", "|---|---|---|---|", "|   |   |   |   |", "|   |   |   |   |"].join("\n"));
      });
    });
    return describe("tableAlignment has set", function() {
      it("create correct (2,2) table (center)", function() {
        var table;
        atom.config.set("markdown-writer.tableAlignment", "center");
        table = insertTableView.createTable(2, 2);
        return expect(table).toEqual(["  |  ", "::|::", "  |  "].join("\n"));
      });
      it("create correct (2,2) table (left)", function() {
        var table;
        atom.config.set("markdown-writer.tableExtraPipes", true);
        atom.config.set("markdown-writer.tableAlignment", "left");
        table = insertTableView.createTable(2, 2);
        return expect(table).toEqual(["|   |   |", "|:--|:--|", "|   |   |"].join("\n"));
      });
      return it("create correct (2,2) table (right)", function() {
        var table;
        atom.config.set("markdown-writer.tableExtraPipes", true);
        atom.config.set("markdown-writer.tableAlignment", "right");
        table = insertTableView.createTable(2, 2);
        return expect(table).toEqual(["|   |   |", "|--:|--:|", "|   |   |"].join("\n"));
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvcmlkZGxlLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9zcGVjL3ZpZXdzL2luc2VydC10YWJsZS12aWV3LXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxlQUFBLEdBQWtCLE9BQUEsQ0FBUSxtQ0FBUjs7RUFFbEIsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFNBQUE7QUFDMUIsUUFBQTtJQUFBLGVBQUEsR0FBa0I7SUFFbEIsVUFBQSxDQUFXLFNBQUE7YUFBRyxlQUFBLEdBQXNCLElBQUEsZUFBQSxDQUFnQixFQUFoQjtJQUF6QixDQUFYO0lBRUEsRUFBQSxDQUFHLDhCQUFILEVBQW1DLFNBQUE7TUFDakMsTUFBQSxDQUFPLGVBQWUsQ0FBQyxZQUFoQixDQUE2QixDQUE3QixFQUFnQyxDQUFoQyxDQUFQLENBQTBDLENBQUMsSUFBM0MsQ0FBZ0QsS0FBaEQ7YUFDQSxNQUFBLENBQU8sZUFBZSxDQUFDLFlBQWhCLENBQTZCLENBQTdCLEVBQWdDLENBQWhDLENBQVAsQ0FBMEMsQ0FBQyxJQUEzQyxDQUFnRCxJQUFoRDtJQUZpQyxDQUFuQztJQUlBLFFBQUEsQ0FBUywwQkFBVCxFQUFxQyxTQUFBO01BQ25DLEVBQUEsQ0FBRyw0QkFBSCxFQUFpQyxTQUFBO0FBQy9CLFlBQUE7UUFBQSxLQUFBLEdBQVEsZUFBZSxDQUFDLFdBQWhCLENBQTRCLENBQTVCLEVBQStCLENBQS9CO2VBQ1IsTUFBQSxDQUFPLEtBQVAsQ0FBYSxDQUFDLE9BQWQsQ0FBc0IsQ0FDcEIsT0FEb0IsRUFFcEIsT0FGb0IsRUFHcEIsT0FIb0IsQ0FJckIsQ0FBQyxJQUpvQixDQUlmLElBSmUsQ0FBdEI7TUFGK0IsQ0FBakM7YUFRQSxFQUFBLENBQUcsNEJBQUgsRUFBaUMsU0FBQTtBQUMvQixZQUFBO1FBQUEsS0FBQSxHQUFRLGVBQWUsQ0FBQyxXQUFoQixDQUE0QixDQUE1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L2xpYi92aWV3cy9pbnNlcnQtdGFibGUtdmlld1wiXG5cbmRlc2NyaWJlIFwiSW5zZXJ0VGFibGVWaWV3XCIsIC0+XG4gIGluc2VydFRhYmxlVmlldyA9IG51bGxcblxuICBiZWZvcmVFYWNoIC0+IGluc2VydFRhYmxlVmlldyA9IG5ldyBJbnNlcnRUYWJsZVZpZXcoe30pXG5cbiAgaXQgXCJ2YWxpZGF0ZXMgdGFibGUgcm93cy9jb2x1bW5zXCIsIC0+XG4gICAgZXhwZWN0KGluc2VydFRhYmxlVmlldy5pc1ZhbGlkUmFuZ2UoMSwgMSkpLnRvQmUgZmFsc2VcbiAgICBleHBlY3QoaW5zZXJ0VGFibGVWaWV3LmlzVmFsaWRSYW5nZSgyLCAyKSkudG9CZSB0cnVlXG5cbiAgZGVzY3JpYmUgXCJ0YWJsZUV4dHJhUGlwZXMgZGlzYWJsZWRcIiwgLT5cbiAgICBpdCBcImNyZWF0ZSBjb3JyZWN0ICgyLDIpIHRhYmxlXCIsIC0+XG4gICAgICB0YWJsZSA9IGluc2VydFRhYmxlVmlldy5jcmVhdGVUYWJsZSgyLCAyKVxuICAgICAgZXhwZWN0KHRhYmxlKS50b0VxdWFsKFtcbiAgICAgICAgXCIgIHwgIFwiXG4gICAgICAgIFwiLS18LS1cIlxuICAgICAgICBcIiAgfCAgXCJcbiAgICAgIF0uam9pbihcIlxcblwiKSlcblxuICAgIGl0IFwiY3JlYXRlIGNvcnJlY3QgKDMsNCkgdGFibGVcIiwgLT5cbiAgICAgIHRhYmxlID0gaW5zZXJ0VGFibGVWaWV3LmNyZWF0ZVRhYmxlKDMsIDQpXG4gICAgICBleHBlY3QodGFibGUpLnRvRXF1YWwoW1xuICAgICAgICBcIiAgfCAgIHwgICB8ICBcIlxuICAgICAgICBcIi0tfC0tLXwtLS18LS1cIlxuICAgICAgICBcIiAgfCAgIHwgICB8ICBcIlxuICAgICAgICBcIiAgfCAgIHwgICB8ICBcIlxuICAgICAgXS5qb2luKFwiXFxuXCIpKVxuXG4gIGRlc2NyaWJlIFwidGFibGVFeHRyYVBpcGVzIGVuYWJsZWRcIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+IGF0b20uY29uZmlnLnNldChcIm1hcmtkb3duLXdyaXRlci50YWJsZUV4dHJhUGlwZXNcIiwgdHJ1ZSlcblxuICAgIGl0IFwiY3JlYXRlIGNvcnJlY3QgKDIsMikgdGFibGVcIiwgLT5cbiAgICAgIHRhYmxlID0gaW5zZXJ0VGFibGVWaWV3LmNyZWF0ZVRhYmxlKDIsIDIpXG4gICAgICBleHBlY3QodGFibGUpLnRvRXF1YWwoW1xuICAgICAgICBcInwgICB8ICAgfFwiXG4gICAgICAgIFwifC0tLXwtLS18XCJcbiAgICAgICAgXCJ8ICAgfCAgIHxcIlxuICAgICAgXS5qb2luKFwiXFxuXCIpKVxuXG4gICAgaXQgXCJjcmVhdGUgY29ycmVjdCAoMyw0KSB0YWJsZVwiLCAtPlxuICAgICAgdGFibGUgPSBpbnNlcnRUYWJsZVZpZXcuY3JlYXRlVGFibGUoMywgNClcbiAgICAgIGV4cGVjdCh0YWJsZSkudG9FcXVhbChbXG4gICAgICAgIFwifCAgIHwgICB8ICAgfCAgIHxcIlxuICAgICAgICBcInwtLS18LS0tfC0tLXwtLS18XCJcbiAgICAgICAgXCJ8ICAgfCAgIHwgICB8ICAgfFwiXG4gICAgICAgIFwifCAgIHwgICB8ICAgfCAgIHxcIlxuICAgICAgXS5qb2luKFwiXFxuXCIpKVxuXG4gIGRlc2NyaWJlIFwidGFibGVBbGlnbm1lbnQgaGFzIHNldFwiLCAtPlxuICAgIGl0IFwiY3JlYXRlIGNvcnJlY3QgKDIsMikgdGFibGUgKGNlbnRlcilcIiwgLT5cbiAgICAgIGF0b20uY29uZmlnLnNldChcIm1hcmtkb3duLXdyaXRlci50YWJsZUFsaWdubWVudFwiLCBcImNlbnRlclwiKVxuXG4gICAgICB0YWJsZSA9IGluc2VydFRhYmxlVmlldy5jcmVhdGVUYWJsZSgyLCAyKVxuICAgICAgZXhwZWN0KHRhYmxlKS50b0VxdWFsKFtcbiAgICAgICAgXCIgIHwgIFwiXG4gICAgICAgIFwiOjp8OjpcIlxuICAgICAgICBcIiAgfCAgXCJcbiAgICAgIF0uam9pbihcIlxcblwiKSlcblxuICAgIGl0IFwiY3JlYXRlIGNvcnJlY3QgKDIsMikgdGFibGUgKGxlZnQpXCIsIC0+XG4gICAgICBhdG9tLmNvbmZpZy5zZXQoXCJtYXJrZG93bi13cml0ZXIudGFibGVFeHRyYVBpcGVzXCIsIHRydWUpXG4gICAgICBhdG9tLmNvbmZpZy5zZXQoXCJtYXJrZG93bi13cml0ZXIudGFibGVBbGlnbm1lbnRcIiwgXCJsZWZ0XCIpXG5cbiAgICAgIHRhYmxlID0gaW5zZXJ0VGFibGVWaWV3LmNyZWF0ZVRhYmxlKDIsIDIpXG4gICAgICBleHBlY3QodGFibGUpLnRvRXF1YWwoW1xuICAgICAgICBcInwgICB8ICAgfFwiXG4gICAgICAgIFwifDotLXw6LS18XCJcbiAgICAgICAgXCJ8ICAgfCAgIHxcIlxuICAgICAgXS5qb2luKFwiXFxuXCIpKVxuXG4gICAgaXQgXCJjcmVhdGUgY29ycmVjdCAoMiwyKSB0YWJsZSAocmlnaHQpXCIsIC0+XG4gICAgICBhdG9tLmNvbmZpZy5zZXQoXCJtYXJrZG93bi13cml0ZXIudGFibGVFeHRyYVBpcGVzXCIsIHRydWUpXG4gICAgICBhdG9tLmNvbmZpZy5zZXQoXCJtYXJrZG93bi13cml0ZXIudGFibGVBbGlnbm1lbnRcIiwgXCJyaWdodFwiKVxuXG4gICAgICB0YWJsZSA9IGluc2VydFRhYmxlVmlldy5jcmVhdGVUYWJsZSgyLCAyKVxuICAgICAgZXhwZWN0KHRhYmxlKS50b0VxdWFsKFtcbiAgICAgICAgXCJ8ICAgfCAgIHxcIlxuICAgICAgICBcInwtLTp8LS06fFwiXG4gICAgICAgIFwifCAgIHwgICB8XCJcbiAgICAgIF0uam9pbihcIlxcblwiKSlcbiJdfQ==
