(function() {
  var _findFirstEmptyRow, _findFirstNonEmptyRowBackwards, _isReferenceDefinition, insertAfterCurrentParagraph, insertAtEndOfArticle, removeDefinitionRange, utils;

  utils = require("../utils");

  insertAtEndOfArticle = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstNonEmptyRowBackwards(editor, editor.getLastBufferRow());
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstNonEmptyRowBackwards = function(editor, row) {
    while (row >= 0 && editor.lineTextForBufferRow(row).length === 0) {
      row--;
    }
    return row;
  };

  insertAfterCurrentParagraph = function(editor, text) {
    var point, position, row;
    position = editor.getCursorBufferPosition();
    row = _findFirstEmptyRow(editor, position.row + 1);
    point = [row, editor.lineTextForBufferRow(row).length];
    if (_isReferenceDefinition(editor, row)) {
      editor.setTextInBufferRange([point, point], "\n" + text);
    } else if (point[1] > 0) {
      editor.setTextInBufferRange([point, point], "\n\n" + text);
    } else {
      editor.setTextInBufferRange([point, point], "\n" + text + "\n");
    }
    return editor.setCursorBufferPosition(position);
  };

  _findFirstEmptyRow = function(editor, row) {
    var lastRow;
    lastRow = editor.getLastBufferRow();
    while (row <= lastRow && editor.lineTextForBufferRow(row).length !== 0) {
      row++;
    }
    if (row > lastRow) {
      return lastRow;
    }
    while (row < lastRow && _isReferenceDefinition(editor, row + 1)) {
      row++;
    }
    return row;
  };

  _isReferenceDefinition = function(editor, row) {
    var line;
    line = editor.lineTextForBufferRow(row);
    return utils.isReferenceDefinition(line);
  };

  removeDefinitionRange = function(editor, range) {
    var emptyLineAbove, emptyLineBelow, lineNum, ref, ref1;
    lineNum = range.start.row;
    emptyLineAbove = !!((ref = editor.lineTextForBufferRow(lineNum - 1)) != null ? ref.trim() : void 0);
    emptyLineBelow = !!((ref1 = editor.lineTextForBufferRow(lineNum + 1)) != null ? ref1.trim() : void 0);
    editor.setSelectedBufferRange(range);
    editor.deleteLine();
    if (emptyLineAbove && emptyLineBelow) {
      return editor.deleteLine();
    }
  };

  module.exports = {
    insertAtEndOfArticle: insertAtEndOfArticle,
    insertAfterCurrentParagraph: insertAfterCurrentParagraph,
    removeDefinitionRange: removeDefinitionRange
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvcmlkZGxlLy5hdG9tL3BhY2thZ2VzL21hcmtkb3duLXdyaXRlci9saWIvaGVscGVycy9pbnNlcnQtbGluay1oZWxwZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLFVBQVI7O0VBT1Isb0JBQUEsR0FBdUIsU0FBQyxNQUFELEVBQVMsSUFBVDtBQUNyQixRQUFBO0lBQUEsUUFBQSxHQUFXLE1BQU0sQ0FBQyx1QkFBUCxDQUFBO0lBRVgsR0FBQSxHQUFNLDhCQUFBLENBQStCLE1BQS9CLEVBQXVDLE1BQU0sQ0FBQyxnQkFBUCxDQUFBLENBQXZDO0lBQ04sS0FBQSxHQUFRLENBQUMsR0FBRCxFQUFNLE1BQU0sQ0FBQyxvQkFBUCxDQUE0QixHQUE1QixDQUFnQyxDQUFDLE1BQXZDO0lBQ1IsSUFBRyxzQkFBQSxDQUF1QixNQUF2QixFQUErQixHQUEvQixDQUFIO01BQ0UsTUFBTSxDQUFDLG9CQUFQLENBQTRCLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBNUIsRUFBNEMsSUFBQSxHQUFLLElBQWpELEVBREY7S0FBQSxNQUFBO01BR0UsTUFBTSxDQUFDLG9CQUFQLENBQTRCLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBNUIsRUFBNEMsTUFBQSxHQUFPLElBQW5ELEVBSEY7O1dBS0EsTUFBTSxDQUFDLHVCQUFQLENBQStCLFFBQS9CO0VBVnFCOztFQVl2Qiw4QkFBQSxHQUFpQyxTQUFDLE1BQUQsRUFBUyxHQUFUO0FBQ3pCLFdBQU0sR0FBQSxJQUFPLENBQVAsSUFBWSxNQUFNLENBQUMsb0JBQVAsQ0FBNEIsR0FBNUIsQ0FBZ0MsQ0FBQyxNQUFqQyxLQUEyQyxDQUE3RDtNQUFOLEdBQUE7SUFBTTtBQUNOLFdBQU87RUFGd0I7O0VBTWpDLDJCQUFBLEdBQThCLFNBQUMsTUFBRCxFQUFTLElBQVQ7QUFDNUIsUUFBQTtJQUFBLFFBQUEsR0FBVyxNQUFNLENBQUMsdUJBQVAsQ0FBQTtJQUVYLEdBQUEsR0FBTSxrQkFBQSxDQUFtQixNQUFuQixFQUEyQixRQUFRLENBQUMsR0FBVCxHQUFlLENBQTFDO0lBQ04sS0FBQSxHQUFRLENBQUMsR0FBRCxFQUFNLE1BQU0sQ0FBQyxvQkFBUCxDQUE0QixHQUE1QixDQUFnQyxDQUFDLE1BQXZDO0lBQ1IsSUFBRyxzQkFBQSxDQUF1QixNQUF2QixFQUErQixHQUEvQixDQUFIO01BQ0UsTUFBTSxDQUFDLG9CQUFQLENBQTRCLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBNUIsRUFBNEMsSUFBQSxHQUFLLElBQWpELEVBREY7S0FBQSxNQUVLLElBQUcsS0FBTSxDQUFBLENBQUEsQ0FBTixHQUFXLENBQWQ7TUFDSCxNQUFNLENBQUMsb0JBQVAsQ0FBNEIsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUE1QixFQUE0QyxNQUFBLEdBQU8sSUFBbkQsRUFERztLQUFBLE1BQUE7TUFHSCxNQUFNLENBQUMsb0JBQVAsQ0FBNEIsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUE1QixFQUE0QyxJQUFBLEdBQUssSUFBTCxHQUFVLElBQXRELEVBSEc7O1dBS0wsTUFBTSxDQUFDLHVCQUFQLENBQStCLFFBQS9CO0VBWjRCOztFQWM5QixrQkFBQSxHQUFxQixTQUFDLE1BQUQsRUFBUyxHQUFUO0FBQ25CLFFBQUE7SUFBQSxPQUFBLEdBQVUsTUFBTSxDQUFDLGdCQUFQLENBQUE7QUFFSixXQUFNLEdBQUEsSUFBTyxPQUFQLElBQWtCLE1BQU0sQ0FBQyxvQkFBUCxDQUE0QixHQUE1QixDQUFnQyxDQUFDLE1BQWpDLEtBQTJDLENBQW5FO01BQU4sR0FBQTtJQUFNO0lBQ04sSUFBa0IsR0FBQSxHQUFNLE9BQXhCO0FBQUEsYUFBTyxRQUFQOztBQUVNLFdBQU0sR0FBQSxHQUFNLE9BQU4sSUFBaUIsc0JBQUEsQ0FBdUIsTUFBdkIsRUFBK0IsR0FBQSxHQUFNLENBQXJDLENBQXZCO01BQU4sR0FBQTtJQUFNO0FBQ04sV0FBTztFQVBZOztFQVNyQixzQkFBQSxHQUF5QixTQUFDLE1BQUQsRUFBUyxHQUFUO0FBQ3ZCLFFBQUE7SUFBQSxJQUFBLEdBQU8sTUFBTSxDQUFDLG9CQUFQLENBQTRCLEdBQTVCO0FBQ1AsV0FBTyxLQUFLLENBQUMscUJBQU4sQ0FBNEIsSUFBNUI7RUFGZ0I7O0VBS3pCLHFCQUFBLEdBQXdCLFNBQUMsTUFBRCxFQUFTLEtBQVQ7QUFDdEIsUUFBQTtJQUFBLE9BQUEsR0FBVSxLQUFLLENBQUMsS0FBSyxDQUFDO0lBRXRCLGNBQUEsR0FBaUIsQ0FBQyxnRUFBeUMsQ0FBRSxJQUExQyxDQUFBO0lBQ25CLGNBQUEsR0FBaUIsQ0FBQyxrRUFBeUMsQ0FBRSxJQUExQyxDQUFBO0lBRW5CLE1BQU0sQ0FBQyxzQkFBUCxDQUE4QixLQUE5QjtJQUVBLE1BQU0sQ0FBQyxVQUFQLENBQUE7SUFDQSxJQUF1QixjQUFBLElBQWtCLGNBQXpDO2FBQUEsTUFBTSxDQUFDLFVBQVAsQ0FBQSxFQUFBOztFQVRzQjs7RUFXeEIsTUFBTSxDQUFDLE9BQVAsR0FDRTtJQUFBLG9CQUFBLEVBQXNCLG9CQUF0QjtJQUNBLDJCQUFBLEVBQTZCLDJCQUQ3QjtJQUVBLHFCQUFBLEVBQXVCLHFCQUZ2Qjs7QUFqRUYiLCJzb3VyY2VzQ29udGVudCI6WyJ1dGlscyA9IHJlcXVpcmUgXCIuLi91dGlsc1wiXG5cbiMgTG9vayBiYWNrd2FyZHMgZnJvbSB0aGUgZW5kIG9mIGFydGljbGUgZm9yIHRoZSBmaXJzdCBub24tZW1wdHkgcm93LFxuIyB0aGVuIGluc2VydCB0aGUgdGV4dC5cbiNcbiMgSWYgdGhlIG5vbi1lbXB0eSByb3cgaGFwcGVucyB0byBiZSBhIHJlZmVyZW5jZSBsaW5rLCB0aGUgdGV4dCBzdGFydHNcbiMgaW4gYSBuZXcgbGluZS4gT3RoZXJ3aXNlLCB0aGUgdGV4dCBzdGFydHMgaW4gYSBuZXcgcGFyYWdyYXBoLlxuaW5zZXJ0QXRFbmRPZkFydGljbGUgPSAoZWRpdG9yLCB0ZXh0KSAtPlxuICBwb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpICMga2VlcCBvcmlnaW5hbCBjdXJzb3IgcG9zaXRpb25cblxuICByb3cgPSBfZmluZEZpcnN0Tm9uRW1wdHlSb3dCYWNrd2FyZHMoZWRpdG9yLCBlZGl0b3IuZ2V0TGFzdEJ1ZmZlclJvdygpKVxuICBwb2ludCA9IFtyb3csIGVkaXRvci5saW5lVGV4dEZvckJ1ZmZlclJvdyhyb3cpLmxlbmd0aF1cbiAgaWYgX2lzUmVmZXJlbmNlRGVmaW5pdGlvbihlZGl0b3IsIHJvdylcbiAgICBlZGl0b3Iuc2V0VGV4dEluQnVmZmVyUmFuZ2UgW3BvaW50LCBwb2ludF0sIFwiXFxuI3t0ZXh0fVwiXG4gIGVsc2VcbiAgICBlZGl0b3Iuc2V0VGV4dEluQnVmZmVyUmFuZ2UgW3BvaW50LCBwb2ludF0sIFwiXFxuXFxuI3t0ZXh0fVwiXG5cbiAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKHBvc2l0aW9uKVxuXG5fZmluZEZpcnN0Tm9uRW1wdHlSb3dCYWNrd2FyZHMgPSAoZWRpdG9yLCByb3cpIC0+XG4gIHJvdy0tIHdoaWxlIHJvdyA+PSAwICYmIGVkaXRvci5saW5lVGV4dEZvckJ1ZmZlclJvdyhyb3cpLmxlbmd0aCA9PSAwXG4gIHJldHVybiByb3dcblxuIyBTZWFyY2ggZnJvbSB0aGUgY3VycmVudCByb3cgZm9yIHRoZSBmaXJzdCBlbXB0eSByb3cgKG5vdCBmb2xsb3dlZCBieSBhbnlcbiMgcmVmZXJlbmNlIGxpbmtzKSBvciB0aGUgZW5kIG9mIGFydGljbGUsIHRoZW4gaW5zZXJ0IHRoZSB0ZXh0LlxuaW5zZXJ0QWZ0ZXJDdXJyZW50UGFyYWdyYXBoID0gKGVkaXRvciwgdGV4dCkgLT5cbiAgcG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oKSAjIGtlZXAgb3JpZ2luYWwgY3Vyc29yIHBvc2l0aW9uXG5cbiAgcm93ID0gX2ZpbmRGaXJzdEVtcHR5Um93KGVkaXRvciwgcG9zaXRpb24ucm93ICsgMSlcbiAgcG9pbnQgPSBbcm93LCBlZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3cocm93KS5sZW5ndGhdXG4gIGlmIF9pc1JlZmVyZW5jZURlZmluaXRpb24oZWRpdG9yLCByb3cpXG4gICAgZWRpdG9yLnNldFRleHRJbkJ1ZmZlclJhbmdlIFtwb2ludCwgcG9pbnRdLCBcIlxcbiN7dGV4dH1cIlxuICBlbHNlIGlmIHBvaW50WzFdID4gMFxuICAgIGVkaXRvci5zZXRUZXh0SW5CdWZmZXJSYW5nZSBbcG9pbnQsIHBvaW50XSwgXCJcXG5cXG4je3RleHR9XCJcbiAgZWxzZVxuICAgIGVkaXRvci5zZXRUZXh0SW5CdWZmZXJSYW5nZSBbcG9pbnQsIHBvaW50XSwgXCJcXG4je3RleHR9XFxuXCJcblxuICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24ocG9zaXRpb24pXG5cbl9maW5kRmlyc3RFbXB0eVJvdyA9IChlZGl0b3IsIHJvdykgLT5cbiAgbGFzdFJvdyA9IGVkaXRvci5nZXRMYXN0QnVmZmVyUm93KClcbiAgIyBmaW5kIHRoZSBmaXJzdCBlbXB0eSBsaW5lXG4gIHJvdysrIHdoaWxlIHJvdyA8PSBsYXN0Um93ICYmIGVkaXRvci5saW5lVGV4dEZvckJ1ZmZlclJvdyhyb3cpLmxlbmd0aCAhPSAwXG4gIHJldHVybiBsYXN0Um93IGlmIHJvdyA+IGxhc3RSb3dcbiAgIyBza2lwIHJlZmVyZW5jZSBsaW5rc1xuICByb3crKyB3aGlsZSByb3cgPCBsYXN0Um93ICYmIF9pc1JlZmVyZW5jZURlZmluaXRpb24oZWRpdG9yLCByb3cgKyAxKVxuICByZXR1cm4gcm93XG5cbl9pc1JlZmVyZW5jZURlZmluaXRpb24gPSAoZWRpdG9yLCByb3cpIC0+XG4gIGxpbmUgPSBlZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3cocm93KVxuICByZXR1cm4gdXRpbHMuaXNSZWZlcmVuY2VEZWZpbml0aW9uKGxpbmUpXG5cbiMgUmVtb3ZlIHRoZSByZWZlcmVuY2UgZGVmaW5pdGlvbiByYW5nZSBwYXNzZWQgaW5cbnJlbW92ZURlZmluaXRpb25SYW5nZSA9IChlZGl0b3IsIHJhbmdlKSAtPlxuICBsaW5lTnVtID0gcmFuZ2Uuc3RhcnQucm93XG5cbiAgZW1wdHlMaW5lQWJvdmUgPSAhIWVkaXRvci5saW5lVGV4dEZvckJ1ZmZlclJvdyhsaW5lTnVtIC0gMSk/LnRyaW0oKVxuICBlbXB0eUxpbmVCZWxvdyA9ICEhZWRpdG9yLmxpbmVUZXh0Rm9yQnVmZmVyUm93KGxpbmVOdW0gKyAxKT8udHJpbSgpXG5cbiAgZWRpdG9yLnNldFNlbGVjdGVkQnVmZmVyUmFuZ2UocmFuZ2UpXG5cbiAgZWRpdG9yLmRlbGV0ZUxpbmUoKVxuICBlZGl0b3IuZGVsZXRlTGluZSgpIGlmIGVtcHR5TGluZUFib3ZlICYmIGVtcHR5TGluZUJlbG93XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgaW5zZXJ0QXRFbmRPZkFydGljbGU6IGluc2VydEF0RW5kT2ZBcnRpY2xlXG4gIGluc2VydEFmdGVyQ3VycmVudFBhcmFncmFwaDogaW5zZXJ0QWZ0ZXJDdXJyZW50UGFyYWdyYXBoXG4gIHJlbW92ZURlZmluaXRpb25SYW5nZTogcmVtb3ZlRGVmaW5pdGlvblJhbmdlXG4iXX0=
