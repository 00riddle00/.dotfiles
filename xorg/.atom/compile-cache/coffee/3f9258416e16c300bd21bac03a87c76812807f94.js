(function() {
  var NewDraftView, NewFileView, NewPostView, path;

  path = require("path");

  NewFileView = require("../../lib/views/new-file-view");

  NewDraftView = require("../../lib/views/new-draft-view");

  NewPostView = require("../../lib/views/new-post-view");

  describe("NewFileView", function() {
    beforeEach(function() {
      return waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
    });
    describe("NewFileView", function() {
      var newFileView;
      newFileView = null;
      beforeEach(function() {
        return newFileView = new NewFileView({});
      });
      return describe('.getFileName', function() {
        return it("get filename in hexo format", function() {
          atom.config.set("markdown-writer.newFileFileName", "file-{slug}{extension}");
          atom.config.set("markdown-writer.fileExtension", ".md");
          newFileView.titleEditor.setText("Hexo format");
          return expect(newFileView.getFileName()).toBe("file-hexo-format.md");
        });
      });
    });
    describe("NewDraftView", function() {
      var newDraftView;
      newDraftView = null;
      beforeEach(function() {
        return newDraftView = new NewDraftView({});
      });
      describe("class methods", function() {
        return it("override correctly", function() {
          expect(NewDraftView.fileType).toBe("Draft");
          expect(NewDraftView.pathConfig).toBe("siteDraftsDir");
          return expect(NewDraftView.fileNameConfig).toBe("newDraftFileName");
        });
      });
      describe(".display", function() {
        return it('display correct message', function() {
          newDraftView.display();
          newDraftView.dateEditor.setText("2015-08-23 11:19");
          newDraftView.titleEditor.setText("Draft Title");
          return expect(newDraftView.message.text()).toBe("Site Directory: " + (atom.project.getPaths()[0]) + "\nCreate Draft At: " + (path.join("_drafts", "draft-title.markdown")));
        });
      });
      return describe(".getFrontMatter", function() {
        return it("get the correct front matter", function() {
          var frontMatter;
          newDraftView.dateEditor.setText("2015-08-23 11:19");
          newDraftView.titleEditor.setText("Draft Title");
          frontMatter = newDraftView.getFrontMatter();
          expect(frontMatter.layout).toBe("post");
          expect(frontMatter.published).toBe(false);
          expect(frontMatter.title).toBe("Draft Title");
          expect(frontMatter.slug).toBe("draft-title");
          return expect(frontMatter.date).toBe("2015-08-23 11:19");
        });
      });
    });
    return describe("NewPostView", function() {
      var newPostView;
      newPostView = null;
      beforeEach(function() {
        return newPostView = new NewPostView({});
      });
      describe("class methods", function() {
        return it("override correctly", function() {
          expect(NewPostView.fileType).toBe("Post");
          expect(NewPostView.pathConfig).toBe("sitePostsDir");
          return expect(NewPostView.fileNameConfig).toBe("newPostFileName");
        });
      });
      describe(".display", function() {
        return it('display correct message', function() {
          newPostView.display();
          newPostView.dateEditor.setText("2015-08-23 11:19");
          newPostView.titleEditor.setText("Post's Title");
          return expect(newPostView.message.text()).toBe("Site Directory: " + (atom.project.getPaths()[0]) + "\nCreate Post At: " + (path.join("_posts", "2015", "2015-08-23-post-s-title.markdown")));
        });
      });
      return describe(".getFrontMatter", function() {
        return it("get the correct front matter", function() {
          var frontMatter;
          newPostView.dateEditor.setText("2015-08-24 11:19");
          newPostView.titleEditor.setText("Post's Title: Subtitle");
          frontMatter = newPostView.getFrontMatter();
          expect(frontMatter.layout).toBe("post");
          expect(frontMatter.published).toBe(true);
          expect(frontMatter.title).toBe("Post's Title: Subtitle");
          expect(frontMatter.slug).toBe("post-s-title-subtitle");
          return expect(frontMatter.date).toBe("2015-08-24 11:19");
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
