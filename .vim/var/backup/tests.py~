from rest_framework import status
from app.backend.helpers.test_helpers import TokenTestCase
from app.backend.helpers.helpers import set_dynamic_document
from app.backend.authentication.models import User
from app.backend.object.models import Object
from app.backend.company.models import Company
from app.backend.task.template.models import Template as TemplateDocument
from .models import *

class TaskTestCase(TokenTestCase):
	def tearDown(self):
		Task.drop_collection()



class TaskTestCase(TokenTestCase):
    def tearDown(self):
        Task.drop_collection()

    def create_element(self, return_data=True):
        point = self.create_point()

        data = {
            'template_id': point['template_id'],
            'point_id': point['id'],
            'name': 'Element test',
            'type': 'text',
        }

        response = self.authorize().post('/api/templates/elements/', data)
        if return_data:
            response.data['template_id'] = point['template_id']
            response.data['point_id'] = point['id']
        if return_data:
            return response.data
        return response

    def test_create_task(self):

        user = User.objects.create(
            email='testTaskUser@gmail.com'
        )

        obj = Object.objects.create(
            name='Objectas'
        )

        template = self.create_element()

        data = {
            'name': 'Uzduotis 1',
            'comment': 'Das is a comment',
            'user_id': str(user.id),
            'object_id': str(obj.id),
            'template_id': template['template_id']
        }

        response = self.authorize().post('/api/tasks/', data)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

    def test_get_all_tasks(self):
        counter = 0
        company = Company.objects.create(
            name='Kompanija1'
        )
        user = User.objects.create(
            email='testTaskUser@gmail.com'
        )
        obj = Object.objects.create(
            name='Objectas'
        )
        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )
        self.user.company_id = company
        self.user.save()
        while counter < 2:
            Task.objects.create(
                name='TestTask' + str(counter),
                user_id=user,
                object_id=obj,
                company_id=str(company.id),
                template=template
            )
            counter += 1
        response = self.authorize().get('/api/tasks/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_get_tasks_by_company(self):
        company = Company.objects.create(
            name='Kompanija1'
        )
        self.user.company_id = company
        self.user.save()

        obj = Object.objects.create(
            name='Objectas',
            company_id=str(company.id)
        )

        obj1 = Object.objects.create(
            name='Objectas',
        )

        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )

        Task.objects.create(
            name='TEST2',
            object_id=str(obj.id),
            user_id=str(self.user.id),
            company_id=str(company.id),
            template=template
        )
        Task.objects.create(
            name='TEST2',
            object_id=str(obj1.id),
            user_id=str(self.user.id),
            template=template
        )

        response = self.authorize().get('/api/tasks/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_update_task(self):
        company = Company.objects.create(
            name='Kompanija1'
        )
        obj = Object.objects.create(
            name='Objectas',
            company_id=str(company.id)
        )

        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )

        task = Task.objects.create(
            name='TESTupdate',
            object_id=str(obj.id),
            user_id=str(self.user.id),
            template=template
        )

        user = User.objects.create(
            email='UpatateTask@gmail.com'
        )

        pk = str(task.id)

        data = {
            'name': 'UpadeatedTask',
            'user_id': str(user.id),

        }

        response = self.authorize().put('/api/tasks/' + pk + '/', data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['name'], data['name'])
        self.assertEqual(response.data['user_id'], data['user_id'])

    def test_get_task(self):
        user = User.objects.create(
            email='testTaskUser@gmail.com'
        )
        obj = Object.objects.create(
            name='Objectas'
        )

        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )

        data = {
            'name': 'Uzduotis 1',
            'comment': 'Das is a comment',
            'user_id': str(user.id),
            'object_id': str(obj.id),
            'template': template
        }

        task = Task.objects.create(**data)

        pk = str(task.id)

        response = self.authorize().get('/api/tasks/' + pk + '/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_delete_task(self):
        user = User.objects.create(
            email='testTaskUser@gmail.com'
        )
        obj = Object.objects.create(
            name='Objectas'
        )
        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )

        data = {
            'name': 'Uzduotis 1',
            'comment': 'Das is a comment',
            'user_id': str(user.id),
            'object_id': str(obj.id),
            'template': template
        }

        task = Task.objects.create(**data)

        pk = str(task.id)

        response = self.authorize().delete('/api/tasks/' + pk + '/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)

        response = self.authorize().delete('/api/tasks/' + pk + '/')
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

    def test_dynamic_embbeded_field(self):
        obj = Object.objects.create(
            name='Objectas'
        )

        template_doc = TemplateDocument.objects.create(
            name='Das is good template'
        )

        template = set_dynamic_document(
            TemplateDocument,
            str(template_doc.id),
            Template
        )

        task = Task.objects.create(
            name='Pavadinimas',
            user_id=str(self.user.id),
            object_id=str(obj.id),
            template=template
        )

        self.assertEqual(task.template.name, template.name)
