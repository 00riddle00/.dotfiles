from django.http import Http404
from django.conf import settings
from mongoengine import connect
from rest_framework import status
from .exceptions import APIError
import rest_framework
import datetime


def get_document_or_404(document, *args, **kwargs):
    try:
        return document.objects.get(*args, **kwargs)
    except document.DoesNotExist:

        raise Http404


def get_document(document, *args, **kwargs):
    try:
        return document.objects.get(*args, **kwargs)
    except document.DoesNotExist:

        return False


def connect_db():
    connect(
        settings.MONGO_DB['NAME'],
        username=settings.MONGO_DB['USER'],
        password=settings.MONGO_DB['PASSWORD'],
        host=settings.MONGO_DB['HOST']
    )


def get_user_companies(request):
    companies_list = list()
    if request.user.company_id:
        companies_list.append(request.user.company_id)
        for company in request.user.company_id.companies:
            companies_list.append(company)

    return companies_list


def update_instance(instance, fields, request, non_updatable=None):

    if non_updatable:
        non_updatable.append('id')
    else:
        non_updatable = ['id', ]

    for key in request.data:
        if key in fields:
            value = request.data[key]
            if not value:
                raise APIError("The value of the field '%s' cannot be empty" % (key))
            else:
                setattr(instance, key, value)
        else:
            raise APIError("There is no field '%s'" % (key))

    return instance


def exception_error(exception):
    if exception.__class__.__name__ == 'APIError':
        data = {'detail': str(exception)}
        response = exception.status_code

    else:
        filename = datetime.datetime.now().strftime("%Y_%m_%d")
        with open('log/'+filename+'.txt', 'a') as out:
            out.write('------------------'+'\n')
            out.write(str(exception)+'\n')

            data = {'detail': 'Internal error'}
            response = status.HTTP_500_INTERNAL_SERVER_ERROR

    return rest_framework.response.Response(data, status=response)


def set_dynamic_document(copy_instance, copy_instance_id, instance):
    document = get_document(copy_instance, id=copy_instance_id)
    dynamic_document = instance()
    if document:
        for field in document._fields:
            setattr(dynamic_document, field, getattr(document, field))

    return dynamic_document
