import random
from sys import exit


#@CLASSES


class Personazas(object):

    def __init__(self, name):
        self.name = name
        self.jega = 0
        self.protas = 0
        #self.aprasymas
        #self.jega
        #self.protas

    def info(self):
        print "\n", self.name, "\nName:", playername[0], "\n\nStrength:", self.jega, "\nIntelligence:", self.protas
        print self.aprasymas, "\n"








class Notifs(object):

    def __init__(self, person, player):
        self.person = person
        self.player = player

    def sveikinu(self):

        self.sp = self.player + ", congratulations, you have chosen"

        if self.person == 'scout':
            print self.sp, "Pecheneg Scout!"
        if self.person == "merchant":
            print self.sp, "Swedish Merchant!"
        if self.person == "sage":
            print self.sp, "Kiev Sage!"
        if self.person == "viking":
            print self.sp, "Visitant Viking!"
        if self.person == "archer":
            print self.sp, "Chernigov Archer!"
        if self.person == "witch":
            print self.sp, "Steppe Witch-doctor!"

        self.manual1 = ("\nPress \"info\" to read character's description\nPress \"inv\" to check your inventory"
                "\nPress \"map\" to view map"
                "\nPress \"continue\" to continue the game")

        print self.manual1








class Field(object):

    def __init__(self, name):
        self.name = name

    def entrance(self):
        #self.koreik = koreik
        #self.riba = riba

        #self.papildomas
        print "\nWelcome to", self.name, "\b!\n"
        print "Entrance: dice +", self.koreik, "at least", self.riba, self.papildomas


        kauliukas()

        #padaryti visiems sita objektams
        self.m1 = m + zvalgas.protas
        #m1 - personazo attribute + kauliukas(m)
        if self.m1 >= self.riba:
            print "You have entered", self.name, "\b!"
            self.patekote = True
            print self.aprasymas
        else:
            print "You did not succeed. Wait until the next turn."
            self.patekote = False



class Map(object):

    def buildmap(self):

        if player4 == False:
            if player3 == False:
                self.mapas = "16(4x4)"
            else:
                self.mapas = "20(4x5)"
        else:
            self.mapas = "25(5x5)"






#@OBJECTS

zvalgas = Personazas("Pecheneg Scout")
pirklys = Personazas("Swedish Merchant")
gramotejus = Personazas("Kiev Sage")
vikingas = Personazas("Visitant Viking")
lankininkas = Personazas("Chernigov Archer")
samanka = Personazas("Steppe Witch-doctor")





#@FUNCTIONS


def kauliuko_loop():

    i = 1

    while i < 7:

       print "\r%d" % i,

       i += 1


def kauliukas():
    global m
    raw_input("Roll a dice(Enter) > ")

    for i in range(1,50000):
        kauliuko_loop()
    i = random.randint(1,6)
    print "\r%d" %i
    m = i
    return m

def personazai_info():
    print '''

Charater descriptions: character_descriptions.py (import later)

    '''


def eile(nr):
    global playername
    playername = []

    if nr == 1:
        playername = [player1]
    if nr == 2:
        playername = [player2]
    if nr == 3:
        playername = [player3]
    if nr == 4:
        playername = [player4]
    if nr == 11:
        playername = playername1
    if nr == 12:
        playername = playername2
    if nr == 13 and player3:
        playername = playername3
    if nr == 14 and player4:
        playername = playername4




    return playername




def intro():

    global player1, player2, player3, player4
    global zaideju_sk

    print "Welcome to The Treacherous Forest!"

    print "How many people are playing?"



    zaideju_sk = input("> ")

    while zaideju_sk not in range(2,5):
        print "The number of players should be from 2 to 4!"
        zaideju_sk = input("> ")


    #reiktu kad toj pacioj eilutej vis atsirastu promptas
    if zaideju_sk == 2:
        player1 = raw_input("Blue player> ")
        player2 = raw_input("Green player> ")
        player3 = False
        player4 = False
    elif zaideju_sk == 3:
        player1 = raw_input("Blue player> ")
        player2 = raw_input("Green player> ")
        player3 = raw_input("Red player> ")
        player4 = False
    else:
        player1 = raw_input("Blue player> ")
        player2 = raw_input("Green player> ")
        player3 = raw_input("Red player> ")
        player4 = raw_input("Yellow player> ")

    #print the list of players
    print "\nPlayer(1):", player1, "\nPlayer(2):", player2
    if player3:
        print "Player(3):", player3
    if player4:
        print "Player(4):", player4





    tinka = raw_input("\nContinue(y/n)? ")

    if tinka == "y" or tinka == "Y" or tinka == "yes" or tinka == "Yes":
        print "\nGood luck!\n"
    else:
        exit(1)


#make dict of players


    #f2_personazu issirinkimas



#personazo rinkimasis - "kitas" arba "atgal"






class Pasirinkimas(object):


    def __init__(self):
        self.p1 = 1
        self.p2 = 1
        self.p3 = 1
        self.p4 = 1
        self.p5 = 1
        self.p6 = 1


    def pasirinkimas(self):

        if playername[0] == player1:
            print "\nBlue player(" + player1, "\b): choose your character!"
        if playername[0] == player2:
            print "\nGreen player(" + player2, "\b): choose your character!"
        if playername[0] == player3:
            print "\nRed player(" + player3, "\b): choose your character!"
        if playername[0] == player4:
            print "\nYellow player(" + player4, "\b): choose your character!"



        print '''
1.Pecheneg Scout
2.Swedish Merchant
3.Kiev Sage
4.Visitant Viking
5.Chernigov Archer
6.Steppe Witch-doctor

Detailed description(d)

'''

        choice = raw_input("> ")


        #sukuriamas pasirinktas personazas
        if choice == "d" or choice == "D":
            personazai_info()
            raw_input("(Continue?) > ")
            self.pasirinkimas()



        if choice == "1" or choice == "scout" or choice == "Scout":
            if self.p1 == 1:

                playername.append('scout')

                zvalgas.jega += 3
                zvalgas.protas += 3


                zvalgas.aprasymas = ('''
                \n+1 with Citizens\n-1 with Monsters
                \nAbility to hire any fellow traveler for 1 item
                ''')
                zvalgasnotifs = Notifs("scout", playername[0])
                zvalgasnotifs.sveikinu()


                self.p1 += 1


            else:
                print "Pecheneg Scout is already taken!\n", 20 * "_"
                self.pasirinkimas()





        if choice == "2" or choice == "merchant" or choice == "Merchant":
            if self.p2 == 1:

                playername.append('merchant')

                pirklys.jega += 3
                pirklys.protas += 3

                pirklys.aprasymas = ('''
                \n+1 with Citizens\n-1 with Undead
                \nThe Translator is hired for free
                ''')


                pirklysnotifs = Notifs("merchant", playername[0])
                pirklysnotifs.sveikinu()



                self.p2 += 1


            else:
                print "Swedish Merchant is already taken!\n", 20 * "_"

                self.pasirinkimas()


        if choice == "3" or choice == "sage" or choice == "Sage":
            if self.p3 == 1:
                playername.append('sage')

                gramotejus.jega += 2
                gramotejus.protas += 4

                gramotejus.aprasymas = ('''
                \n +1 with Wizards\n-1 with Water Creatures
                \nFortune-teller is hired for free
                ''')


                gramotejusnotifs = Notifs("sage", playername[0])
                gramotejusnotifs.sveikinu()

                self.p3 += 1

            else:
                print "Kiev Sage is already taken!\n", 20 * "_"

                self.pasirinkimas()


        if choice == "4" or choice == "viking" or choice == "Viking":
            if self.p4 == 1:

                playername.append('viking')

                vikingas.jega += 4
                vikingas.protas += 2

                vikingas.aprasymas = ('''
                \n-1 with Wizards
                \nEx-convict is hired for free
                ''')


                vikingasnotifs = Notifs("viking", playername[0])
                vikingasnotifs.sveikinu()

                self.p4 += 1

            else:
                print "Visiting Viking is already taken!", 20 * "_"

                self.pasirinkimas()


        if choice == "5" or choice == "archer" or choice == "Archer":
            if self.p5 == 1:


                playername.append('archer')

                lankininkas.jega += 3
                lankininkas.protas += 3

                lankininkas.aprasymas = ('''
                \n+1 with Bandits\n-1 with Undead
                \nWarrior is hired for free
                ''')

                lanknotifs = Notifs("archer", playername[0])
                lanknotifs.sveikinu()

                self.p5 += 1

            else:
                print "Chernigov Archer is already taken!\n", 20 * "_"
                self.pasirinkimas()


        if choice == "6" or choice == "witch" or choice == "Witch":
            if self.p6 == 1:

                playername.append('witch')

                samanka.jega += 2
                samanka.protas += 4

                samanka.aprasymas = ('''

                \nSorcerer is hired for free
                ''')

                samankanotifs = Notifs("witch", playername[0])
                samankanotifs.sveikinu()

                self.p6 += 1

            else:
                print "Steppe Witch-doctor is already taken!\n", 20 * "_"
                pasirinkimas()



#manual klase/fja #game notifs klase/fja



def accessible():
    if action == "info":
        if playername[1] == 'scout':
            zvalgas.info()
        if playername[1] == 'merchant':
            pirklys.info()
        if playername[1] == 'sage':
            gramotejus.info()
        if playername[1] == 'viking':
            vikingas.info()
        if playername[1] == 'archer':
            lankininkas.info()
        if playername[1] == 'witch':
            samanka.info()



        else:
            return(False)


    if action == "inv" or action == "i":
        print "\nYour inventory: \n\n"
    if action == "map":
        print'''

MAP


            A       B       C       D
        _________________________________
    1   |       |       |       |       |
        |       |       |       |       |
        _________________________________
    2   |       |       |       |       |
        |       |       |       |       |
        _________________________________
    3   |       |       |       |       |
        |       |       |       |       |
        _________________________________
    4   |       |       |       |       |
        |       |       |       |       |
        _________________________________


'''

    else:
        return(False)









def prompt():
    global action
    action = raw_input("> ")
    accessible()
    if action == "continue":
        return(False)
    else:
        prompt()



def choices():

    eile(1)
    pasir = Pasirinkimas()


    pasir.pasirinkimas()
    prompt()

    global playername1
    playername1 = playername[:]

    eile(2)
    pasir.pasirinkimas()
    prompt()

    global playername2
    playername2 = playername[:]


    if player3:
        eile(3)
        pasir.pasirinkimas()
    else:
        return (False)

    if player3:
        global playername3
        playername3 = playername[:]


    prompt()


    if player4:
        eile(4)
        pasir.pasirinkimas()
    else:
        return (False)

    if player4:
        global playername4
        playername4 = playername[:]


    prompt()

    return playername1, playername2, playername3, playername4















intro()

karta = Map()

karta.buildmap()

choices()


print "\nGame continues..."

