from sys import exit
import random
from collections import OrderedDict




class Mission(object):

    def __init__(self):
        self.condition = "pass"
        self.glory = "pass"
        self.is_completed = False
        self.in_hands = False



class Follower(object):

    def __init__(self):
        self.name = "pass"
        self.hire = "pass"
        self.gives = "pass"

        self.is_hired = False
        self.in_hands = False




class NPC(object):

    def __init__(self):
        self.name = "pass"
        self._type = "pass"
        self.strength = False
        self.intelligence = False
        self.glory = False
        self.additional = False

        self.win = "pass"
        self.lose = "pass"

        self.is_alive = True









class Item(object):


    def __init__(self):
        self.name = "pass"
        self._type = "pass"
        self.gives = "pass"
        self.char_specific = "pass"
        self.glory = "pass"

        self.reusable = False
        self.used = False
        self.in_use = False


    def use(self):
        pass




class Field(object):

    def __init__(self):
        self.position = "pos.."
        self.is_open = False
        self.name = "name.."
        self.description = "description..."
        self.margin = []
        self.char_specific = "char specific..."


    def get_mission(self):
        if self.name == "Hut":
            game_engine.give_mission()
        if self.name == "Terem":
            game_engine.give_mission()
        if self.name == "Town":
            game_engine.give_mission()


    def change_items(self):
        if self.name == "Inn":
            game_engine.exchange_2_1()
        if self.name == "Hut":
            game_engine.exchange_2_1()
        if self.name == "Idol":
            game_engine.exchange_follower_for_item()
        if self.name == "Terem":
            game_engine.exchange_1_1()
        if self.name == "Town":
            game_engine.exchange_1_1()





    def hiring(self):
        if self.name == "Bonfire":
            game_engine.hiring()
        elif self.name == "Inn":
            game_engine.hiring()
        elif self.name == "Well":
            game_engine.hiring_free()
        elif self.name == "Backwater":
            game_engine.hiring()
        elif self.name == "Terem":
            game_engine.hiring()
        elif self.name == "Town":
            game_engine.hiring()
        else:
            return(False)





    def entrance_perks(self):


        if playername[1] == scout and self.name == "Mound":
            print "Scout knowns how not to lost track in such places. His strength is equal to 6 in entering the mound"
            m1 = 6

            game_engine.dice()

            m1 = m1 + m


        elif playername[1] == sage and self.name == "Terem":
            print "Kiev sage is no stranger to such places, and thus he receives a total of 6 points of intelligence before entering Terem."

            m1 = 6

            game_engine.dice()

            m1 = m1 + m

        elif playername[1] == merchant and self.name == "Town":
            print "The Merchant knows ins and outs of entering a town very well, therefore he receives a total of 5 points of intelligence before entering the Town."

            m1 = 5

            game_engine.dice()

            m1 = m1 + m


        elif playername[1] == viking and self.name == "Crossroads":
            print "The Viking does not lose common sense and picks the safest looking path easily. The total of 4 intelligence points is added to him before entering the card."

            m1 = 4

            game_engine.dice()

            m1 = m1 + m


        elif playername[1] == archer and self.name == "Precipice":
            print "The Archer retains his balance and thus gain total of 4 points of strength when entering the precipice."

            m1 = 4

            game_engine.dice()

            m1 = m1 + m


        elif playername[1] == witch and self.name == "Death Trap":
            print "The Witch-doctor uses her powers of illusion to make the shallowest places of the swamp shine. She get additional 2 points of intelligence when entering the card."




            m1 = 6

            game_engine.dice()

            m1 = m1 + m




        else:
            return(False)




    def special(self):
        if self.name == "Lake":
            game_map.lookup()
        if self.name == "The Source of Oblivion":
            game_inventory.remove_missions()
        if self.name == "Enchanted Field":
            game_map.getout()


    def pre_entrance_fine(self):
        if self.name == "Inn":
            print "If your intelligence (including items and followers) is less than 4, you lose 1 item.\n"
            #if steitmentas
            print "You lose 1 item. Choose which.\n"
            #lose_item()
            #else:
            print "Your intelligence is (self.intelligence), you keep your items to yourself.\n"
        else:
            return(False)


    def entrance_fine(self):
        if self.name == "Thicket":
            print "You have lost track...\n"
            game_engine.skip_move()
        elif self.name == "Pitfall":
            print "You fell into a pitfall. You lose one follower. If there is not any, you skip 2 moves until you finally get yourself on the ground"
            #pirma su sputnikais sutvarkyti ,if not sputnik:
            game_engine.skip_2_moves()
        elif self.name == "Well":
            game_inventory.remove_item()
        elif self.name == "Grove":
            game_engine.skip_move()
        elif self.name == "Swamp":
            game_engine.skip_move()
        elif self.name == "Crossroads":
            game_inventory.remove_follower()
        elif self.name == "Seven Oaks":
            game_engine.skip_move()
        elif self.name == "The Source of Oblivion":
            game_inventory.remove_item()
        elif self.name == "Death Trap":
            game_inventory.remove_many()
        else:
            return(False)


    def entrance(self):


        print "\nWelcome to", self.name, "\b!\n"
        self.is_open = True
        print "Entrance: dice +", self.margin[1], "not less than", self.margin[0]


        global m1

        m1 = 0

        self.pre_entrance_fine()

        self.entrance_perks()

        if m1 == 0:

            game_engine.dice()

            if self.margin[1] == 'strength':
                m1 = m + playername[1].strength
                print "Your total strength is", m1
            elif self.margin[1] == 'intelligence':
                m1 = m + playername[1].intelligence
                print "Your total intelligence is", m1

        if m1 >= self.margin[0]:
            print "You have entered", self.name, "\b!"
            self.entered = True

            print self.description


            self.hiring()

            self.change_items()

            self.get_mission()

            self.special()

        else:
            print "You did not enter."
            self.entered = False
            self.entrance_fine()



    def encounter(self):
        #encounter additional f-ja ("mushroom field", "berry field", "magical field" ,"stone altar", "precipice"
        pass

    def findings(self):
        #findings additional fja (even nr, "mushroom field", "berry field"
        pass

    def exchange(self):
        pass

    def action(self):
        pass

    def mission(self):
        pass



class Inventory(object):

    def __init__(self):
        self.inv = []

        self.in_hands = False

    def add(self):
        pass

    def remove_item(self):
        print playername[0], "loses 1 item"

    def remove_follower(self):
        print playername[0], "loses 1 follower"

    def remove_mission(self):
        print playername[0], "loses 1 mission"

    def remove_missions(self):
        print playername[0], "forgets all his missions!"

    def remove_many(self):
        print playername[0], "loses all his followers in the death trap. If he has not any, he loses 2 glory cards. If there is not any either, he skips two moves."

    def has(self):
        pass

    def list(self):
        pass

    def describe(self):
        pass


    def hiring(self):
        pass

    def add_NPC(self):
        pass

    def exchange(self):
        pass



    def steal_item(self):
        pass







class Card_Deck(object):

    def shuffle(self):
        pass

    def getcard(self):
        pass

    def placecard(self):
        pass

    def give_mission(self):
        pass

    def give_follower(self):
        pass

    def give_item(self):
        pass













class Character(object):

    def __init__(self, name):
        self.name = name
        self.strength = 0
        self.intelligence = 0
        #self.description
        #self.strength
        #self.intelligence

    def info(self):
        print "\n", self.name, "\nName:", playername[0], "\n\nStrength:", self.strength, "\nIntelligence:", self.intelligence
        print self.description, "\n"






class Map(object):

    def __init__(self):

        self.poslist = [
            'A1', 'A2', 'A3', 'A4', 'A5', 'B1', 'B2', 'B3', 'B4', 'B5', 'C1', 'C2', 'C3', 'C4', 'C5', 'D1', 'D2', 'D3', 'D4', 'D5', 'E1', 'E2', 'E3', 'E4', 'E5'
        ]


        self.cardlist = []


    def buildmap(self):



        for x in range(1, 26):
            self.x = random.choice(cards)
            cards.remove(self.x)
            self.cardlist.append(self.x)


        self.mapdict = OrderedDict(zip(self.poslist, self.cardlist))



        if player_nr == 2:
            #cards = 16
            self.entries = ['A5','B5','C5','D5','E1','E2','E3','E4','E5']

            for key in self.entries:
                del self.mapdict[key]

            self.map_visual = '''


        A       B      C        D
     _______________________________
    |       |       |       |       |
  1 |       |       |       |       |
    |       |       |       |       |
     _______________________________
    |       |       |       |       |
  2 |       |       |       |       |
    |       |       |       |       |
     _______________________________
    |       |       |       |       |
  3 |       |       |       |       |
    |       |       |       |       |
     _______________________________
    |       |       |       |       |
  4 |       |       |       |       |
    |       |       |       |       |
     ________________________________


'''

        if player_nr == 3:
            #cards = 20
            self.entries = ['A5','B5','C5','D5', 'E5']

            for key in self.entries:
                del self.mapdict[key]


            self.map_visual = '''


        A       B      C        D       E
     ________________________________________
    |       |       |       |       |       |
  1 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  2 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  3 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  4 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________


'''


        if player_nr == 4:

            self.map_visual = '''


        A       B      C        D       E
     ________________________________________
    |       |       |       |       |       |
  1 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  2 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  3 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  4 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________
    |       |       |       |       |       |
  5 |       |       |       |       |       |
    |       |       |       |       |       |
     ________________________________________


'''




    def getout(self):
        print playername[0], ", in order to get out of this place, you should roll an even number."

    def lookup(self):
        print playername[0], "can lookup a card of choice in the map."

    def change_card(self):
        pass

    def change_my_position(self):
        pass

    def change_other_position(self):
        pass














class Engine(object):


    def __init__(self):

        self.p1 = 1
        self.p2 = 1
        self.p3 = 1
        self.p4 = 1
        self.p5 = 1
        self.p6 = 1

        self.nr = 0

    def dice_loop(self):

        self.i = 1

        while self.i < 7:

            print "\r%d" % self.i,

            self.i += 1


    def dice(self):

        raw_input("Roll a dice(Enter) > ")

        for self.ii in range(1,50000):
            self.dice_loop()
        self.ii = random.randint(1,6)
        print "\r%d" %self.ii
        self.m = self.ii
        global m
        m = self.m

    def characters_description(self):

        print '''

Charater descriptions: character_descriptions.py (import later)

        '''


    def create_players(self):


            self.playerlist = [player1, player2]


            if player_nr == 3:
                self.playerlist.append(player3)

            if player_nr == 4:
                self.playerlist.append(player3)
                self.playerlist.append(player4)


            return self.playerlist


    def change_player_1st_time(self):

        global playername

        playername = []

        if self.nr <= player_nr:

            playername.append(self.playerlist[self.nr])

            self.nr += 1

        else:
            self.nr == 0

            self.change_player()

        return self.nr


    def change_player(self):

        global playername

        playername = playername1[:]







    def intro(self):

        global player_nr

        print "Welcome to The Treacherous Forest!"

        print "How many people are playing?"



        player_nr = input("> ")

        while player_nr not in range(2,5):
            print "The number of players should be from 2 to 4!"
            player_nr = input("> ")

        if player_nr >= 2:

            global player1, player2, player3, player4

            player1 = raw_input("Blue player> ")
            player2 = raw_input("Green player> ")
            player3 = False
            player4 = False


        if player_nr >= 3:

            player3 = raw_input("Red player> ")

        if player_nr == 4:

            player4 = raw_input("Yellow player> ")

        #print the list of players
        print "\nPlayer(1):", player1, "\nPlayer(2):", player2
        if player3:
            print "Player(3):", player3
        if player4:
            print "Player(4):", player4




        self.proceed = raw_input("\nContinue(y/n)? ")

        if self.proceed == "y" or self.proceed == "Y" or self.proceed == "yes" or self.proceed == "Yes":
            print "\nGood luck!\n"
        else:
            exit(1)




    def congrats(self):



        self.sp = playername[0] + ", congratulations, you have chosen"

        if playername[1] == scout:
            print self.sp, "Pecheneg Scout!"
        if playername[1] == merchant:
            print self.sp, "Swedish Merchant!"
        if playername[1] == sage:
            print self.sp, "Kiev Sage!"
        if playername[1] == viking:
            print self.sp, "Visitant Viking!"
        if playername[1] == archer:
            print self.sp, "Chernigov Archer!"
        if playername[1] == witch:
            print self.sp, "Steppe Witch-doctor!"

        self.manual1 = ("\nPress \"info\" to read character's description\nPress \"inv\" to check your inventory"
                "\nPress \"map\" to view map"
                "\nPress \"continue\" to continue the game")

        print self.manual1



    def choosing(self):

        if playername[0] == player1:
            print "\nBlue player(" + player1, "\b): choose your character!"
        if playername[0] == player2:
            print "\nGreen player(" + player2, "\b): choose your character!"
        if playername[0] == player3:
            print "\nRed player(" + player3, "\b): choose your character!"
        if playername[0] == player4:
            print "\nYellow player(" + player4, "\b): choose your character!"



        print '''
1.Pecheneg Scout
2.Swedish Merchant
3.Kiev Sage
4.Visitant Viking
5.Chernigov Archer
6.Steppe Witch-doctor

Detailed description(d)

'''

        self.choice = raw_input("> ")




        if self.choice == "1" or self.choice == "scout" or self.choice == "Scout":
            if self.p1 == 1:

                playername.append(scout)

                scout.strength += 3
                scout.intelligence += 3


                scout.description = ('''
                \n+1 with Citizens\n-1 with Monsters
                \nAbility to hire any fellow traveler for 1 item
                ''')
                self.congrats()


                self.p1 += 1


            else:
                print "Pecheneg Scout is already taken!\n", 20 * "_"
                self.choosing()
                return(False)




        if self.choice == "2" or self.choice == "merchant" or self.choice == "Merchant":
            if self.p2 == 1:

                playername.append(merchant)

                merchant.strength += 3
                merchant.intelligence += 3

                merchant.description = ('''
                \n+1 with Citizens\n-1 with Undead
                \nTranslator is hired for free
                ''')


                self.congrats()


                self.p2 += 1

            else:
                print "Swedish Merchant is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "3" or self.choice == "sage" or self.choice == "Sage":
            if self.p3 == 1:
                playername.append(sage)

                sage.strength += 2
                sage.intelligence += 4

                sage.description = ('''
                \n +1 with Wizards\n-1 with Water Creatures
                \nFortune-teller is hired for free
                ''')


                self.congrats()

                self.p3 += 1

            else:
                print "Kiev Sage is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "4" or self.choice == "viking" or self.choice == "Viking":
            if self.p4 == 1:

                playername.append(viking)

                viking.strength += 4
                viking.intelligence += 2

                viking.description = ('''
                \n-1 with Wizards
                \nEx-convict is hired for free
                ''')


                self.congrats()

                self.p4 += 1

            else:
                print "Visiting Viking is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "5" or self.choice == "archer" or self.choice == "Archer":
            if self.p5 == 1:


                playername.append(archer)

                archer.strength += 3
                archer.intelligence += 3

                archer.description = ('''
                \n+1 with Bandits\n-1 with Undead
                \nWarrior is hired for free
                ''')

                self.congrats()

                self.p5 += 1

            else:
                print "Chernigov Archer is already taken!\n", 20 * "_"
                self.choosing()
                return(False)

        if self.choice == "6" or self.choice == "witch" or self.choice == "Witch":
            if self.p6 == 1:

                playername.append(witch)

                witch.strength += 2
                witch.intelligence += 4

                witch.description = ('''
                \n+1 with Water creatures\n-1 with undead
                \nSorcerer is hired for free
                ''')

                self.congrats()

                self.p6 += 1

            else:
                print "Steppe Witch-doctor is already taken!\n", 20 * "_"
                self.choosing()
                return(False)

        if self.choice == "d" or self.choice == "D":
            self.characters_description()
            raw_input("(Continue?) > ")
            print self.p1, "TEST2"
            self.choosing()


        #else:
        #    self.parse_fail()
        #    print "\n", 20 * "_ "
        #    self.choosing()



    def menu_commands(self):
        if action == "info":
            if playername[1] == scout:
                scout.info()
            if playername[1] == merchant:
                merchant.info()
            if playername[1] == sage:
                sage.info()
            if playername[1] == viking:
                viking.info()
            if playername[1] == archer:
                archer.info()
            if playername[1] == witch:
                witch.info()



            else:
                return(False)


        if action == "inv" or action == "i":
            print "\nYour inventory: \n\n"


        if action == "map":
            print "\n\nYour position is", position
            print "Your card is", game_map.mapdict[position].name
            if game_map.mapdict[position].entered == True:
                print "You have succesfully entered"
            else:
                print "You have not yet entered"


            print "\n\n"
            print game_map.map_visual


        if action == "rules":
            print "self.rules()..."


        if action == "use item":
            print "inv_use()..."






    def choices(self):

        self.create_players()

        self.change_player_1st_time()

        self.choosing()
        self.prompt()

        global playername1
        playername1 = playername[:]

        self.change_player_1st_time()
        self.choosing()
        self.prompt()

        global playername2
        playername2 = playername[:]


        if player3:
            self.change_player_1st_time()
            self.choosing()
            global playername3
            playername3 = playername[:]
        else:
            return (False)

        self.prompt()


        if player4:
            self.change_player_1st_time()
            self.choosing()
            global playername4
            playername4 = playername[:]
        else:
            return (False)


        self.prompt()







    def prompt(self):
        global action
        action = raw_input("> ")
        self.menu_commands()
        if action == "continue" or action == "c":
            return(False)
        else:
            self.prompt()

    def parse(self, action):
        print "parsing..."


    def parse_fail(self):
        print "\nparse fail"
        return(False)

    def use_fail(self):
        print "use fail..."


    def skip_move(self):
        print playername[0], "skips 1 move"

    def skip_2_moves(self):
        print playername[0], "skips 2 moves"

    def players_meet(self):
        pass

    def give_mission(self):
        print playername[0], "gets a new mission."


    def hiring(self):
        print playername[0], "can hire a follower here."

    def hiring_free(self):
        print playername[0], "can hire a follower for free."


    def exchange_1_1(self):
        print playername[0], "can exchange 1 item"


    def exchange_2_1(self):
        print playername[0], "can exchange 2 items to 1"

    def exchange_follower_for_item(self):
        print playername[0], "can exchange a follower for 1 item (any)"



    def encounter(self):
        pass

    def move_into(self):
        pass

    def move_fail(self):
        pass

    def rules(self):
        pass

    def simulate_play(self):
        pass


    def endgame(self):
        print "endgame..."




#CharObjects

scout = Character("Pecheneg Scout")
merchant = Character("Swedish Merchant")
sage = Character("Kiev Sage")
viking = Character("Visitant Viking")
archer = Character("Chernigov Archer")
witch = Character("Steppe Witch-doctor")



#FieldObjects

lair = Field()
lair.position = None
lair.name = "Lair"
lair.description = "You see a suspicious looking Lair."
lair.margin = [6, 'strength']
lair.encounter = ['monster', 'bandit']
lair.findings = [1, 'item', 'any']


thicket = Field()
thicket.position = None
thicket.name = "Thicket"
thicket.description = "You see a thick group of trees"
thicket.margin = [6, 'strength']
thicket.encounter = [None]
thicket.findings = [1, 'item', 'any']


mound = Field()
mound.position = None
mound.name = "Mound"
mound.description = "You see a mound with many skulls and weapons on top. An uncomfortable wind makes you shiver."
mound.margin = [8, 'strength']
mound.encounter = ['undead','wizard']
mound.findings = [1, 'item', 'magical', 'weapon']


bonfire = Field()
bonfire.position = None
bonfire.name = "Bonfire"
bonfire.description = "You approach a huge bonfire. You start to see strange people around it"
bonfire.margin = [6, 'intelligence']
bonfire.encounter = ['bandit', 'citizen']
bonfire.findings = None


backwoods = Field()
backwoods.position = None
backwoods.name = "Backwoods"
backwoods.description = "You see backwoods."
backwoods.margin = [5, 'strength']
backwoods.encounter = ['monster', 'bandit']
backwoods.findings = [1, 'item', 'common', 'weapon']


pitfall = Field()
pitfall.position = None
pitfall.name = "Pitfall"
pitfall.description = "You have successfully avoided a dangerous pitfall, and stand near the edge of it."
pitfall.margin = [7, 'intelligence']
pitfall.encounter = None
pitfall.findings = [1, 'item', 'magical']


inn = Field()
inn.position = None
inn.name = "Inn"
inn.description = "You approad a cosy looking inn."
inn.margin = [5, 'intelligence']
inn.encounter = ['citizen']
inn.findings = None


mushroom_field = Field()
mushroom_field.position = None
mushroom_field.name = "Mushroom Field"
mushroom_field.description = "You approach a mushroom field with many strange looking mushrooms growing everywhere"
mushroom_field.margin = [6, 'intelligence']
mushroom_field.encounter = ['citizen', 'monster']
mushroom_field.findings = [1, 'item', 'any']

hut = Field()
hut.position = None
hut.name = "Hut"
hut.description = "You approach a hut."
hut.margin = [5, 'strength']
hut.encounter = ['bandit', 'wizard']
hut.findings = None


fern_field = Field()
fern_field.position = None
fern_field.name = "Fern Field"
fern_field.description = "You approach a fern field."
fern_field.margin = [5, 'strength']
fern_field.encounter = ['monster']
fern_field.findings = [1, 'item', 'magical']


lake = Field()
lake.position = None
lake.name = "Lake"
lake.description = "You approach a wide lake."
lake.margin = [7, 'intelligence']
lake.encounter = None
lake.findings = None


mountains = Field()
mountains.position = None
mountains.name = "Mountains"
mountains.description = "You approach steep rocky mountains."
mountains.margin = [6, 'intelligence']
mountains.encounter = ['monster']
mountains.findings = [1, 'item', 'common', 'magical', 'follower']


well = Field()
well.position = None
well.name = "Well"
well.description = "You approach a lonely well."
well.margin = [8, 'intelligence']
well.encounter = ['water creature']
well.findings = None


backwater = Field()
backwater.position = None
backwater.name = "Backwater"
backwater.description = "You approach a backwater."
backwater.margin = [5, 'intelligence']
backwater.encounter = ['water creature']
backwater.findings = None


grove = Field()
grove.position = None
grove.name = "Well"
grove.description = "You approach a grove. The fast wind is moving the trees."
grove.margin = [7, 'strength']
grove.encounter = None
grove.findings = [1, 'item', 'common', 'weapon']


idol = Field()
idol.position = None
idol.name = "Idol"
idol.description = "You approach a lonely idol of some god."
idol.margin = [7, 'strength']
idol.encounter = ['wizard']
idol.findings = None



berry_field = Field()
berry_field.position = None
berry_field.name = "Berry Field"
berry_field.description = "You approach a berry field."
berry_field.margin = [7, 'intelligence']
berry_field.encounter = ['monster', 'citizen', 'bandit']
berry_field.findings = [1, 'follower']




terem = Field()
terem.position = None
terem.name = "Terem"
terem.description = "You approach a big russian Terem."
terem.margin = [8, 'intelligence']
terem.encounter = ['citizen', 'wizard']
terem.findings = None



town = Field()
town.position = None
town.name = "Town"
town.description = "You approach a small town."
town.margin = [7, 'intelligence']
town.encounter = ['citizen', 'wizard']
town.findings = None


swamp = Field()
swamp.position = None
swamp.name = "Swamp"
swamp.description = "You approach a suspicious swamp. The stench makes you even stop breathing for a moment."
swamp.margin = [7, 'intelligence']
swamp.encounter = ['undead']
swamp.findings = None




crossroads = Field()
crossroads.position = None
crossroads.name = "Crossroads"
crossroads.description = "You approach crossroads in the forest. The are some signs seen on nearby stones."
crossroads.margin = [6, 'intelligence']
crossroads.encounter = None
crossroads.findings = [1, 'item', 'common', 'magic']


magical_field = Field()
magical_field.position = None
magical_field.name = "Magical Field"
magical_field.description = "You approach a magical field. You start to feel like on some psychedelic trip."
magical_field.margin = [5, 'intelligence']
magical_field.encounter = ['undead']
magical_field.findings = [1, 'item', 'magical', 'weapon']



cave = Field()
cave.position = None
cave.name = "Cave"
cave.description = "You approach a suspicious cave. There might be trouble entering it, since you start having weird hallucination."
cave.margin = [7, 'strength']
cave.encounter = ['any']
cave.findings = [1, 'item', 'magical', 'weapon']



stone_altar = Field()
stone_altar.position = None
stone_altar.name = "Stone Altar"
stone_altar.description = "You approach a stone Altar with some strange runes."
stone_altar.margin = [6, 'strength']
stone_altar.encounter = ['wizard', 'monster']
stone_altar.findings = None





seven_oaks = Field()
seven_oaks.position = None
seven_oaks.name = "Seven Oaks"
seven_oaks.description = "You approach a group of old oaks. There is a Nightingale the Robber sitting on top of one"
seven_oaks.margin = [8, 'intelligence']
seven_oaks.encounter = ['wizard', 'monster']
seven_oaks.findings = [1, 'item', 'magical']





precipice = Field()
precipice.position = None
precipice.name = "Precipice"
precipice.description = "You approach a precipice. Your body starts to feel uneasy."
precipice.margin = [6, 'strength']
precipice.encounter = ['monster', 'bandit']
precipice.findings = None




graveyard = Field()
graveyard.position = None
graveyard.name = "Graveyard"
graveyard.description = "You approach a graveyard in the forest."
graveyard.margin = [5, 'intelligence']
graveyard.encounter = ['undead']
graveyard.findings = [1, 'item', 'common', 'magic']


oblivion = Field()
oblivion.position = None
oblivion.name = "The Source of Oblivion"
oblivion.description = "You approach a Source of Oblivion. You start forgetting things. You feel that you must get out of this place as soon as possible."
oblivion.margin = [6, 'strength']
oblivion.encounter = ['any']
oblivion.findings = None




death_trap = Field()
death_trap.position = None
death_trap.name = "Death Trap"
death_trap.description = "You approach a death trap. You start questioning whether there is any way to pass this swampy place."
death_trap.margin = [8, 'intelligence']
death_trap.encounter = None
death_trap.findings = None


enchanted_field = Field()
enchanted_field.position = None
enchanted_field.name = "Enchanted Field"
enchanted_field.description = "You approach an enchanted field. You start feeling dizzy, your vision becomes blurry."
enchanted_field.margin = [4, 'intelligence']
enchanted_field.encounter = None
enchanted_field.findings = None


'''

#NPCObjects

thief1 = NPC()
thief1.name = "Local Thief"
thief1._type = 'citizen'
thief1.intelligence = 5
thief1.win = game_inventory.steal_item()
thief1.lose = game_inventory.remove_item()


thief2 = NPC()
thief2.name = "Expert Thief"
thief2._type = 'citizen'
thief2.intelligence = 7
thief2.win = game_inventory.steal_item()
thief2.lose = game_inventory.remove_item()

tradesman1 = NPC()
tradesman1.name = "Tradesman"
tradesman1._type = 'citizen'
tradesman1.intelligence = 3
tradesman1.win = game_engine.exchange_1_1()
tradesman1.lose = game_inventory.remove_item()

tradesman2 = NPC()
tradesman2.name = "Expert Tradesman"
tradesman2._type = 'citizen'
tradesman2.intelligence = 4
tradesman2.win = game_engine.exchange_1_1()
tradesman2.lose = game_inventory.remove_item()

knight = NPC()
knight.name = "Knight"
knight._type = 'citizen'
knight.strength = 9
knight.intelligence = 6
knight.glory = 7
knight.win = '@game_inventory.remove_mission() 'arba' 1item_simple 'arba' 1weapon 'arba' 1follower'
knight.lose1 = '@encounter with strength'
knight.lose2 = '@-2ejimai'/'-1follower'/'-1 item'/

guslar = NPC()
guslar.name = "Guslar"
gusla._type = 'citizen'
guslar.intelligence = 8
guslar.win = '@+4 glory/add with defeated cards'
guslar.lose = '@-1 glory card'


prophetess = NPC()
prophetess.name = "Prophetess"
prophetess._type = 'wizard'
prophetess.intelligence = 7
prophetess.win = '@lookup_card'
prophetess.lose = '@skip_move'


warlock = NPC()
warlock.name = "Warlock"
warlock._type = 'wizard'
warlock.intelligence = 8
warlock.win = '@remove 1 follower/steal 1 item/'
warlock.lose = '@lose 2 glory cards'


hermit = NPC()
hermit.name = "Hermit"
hermit._type = 'wizard'
hermit.intelligence = 7
hermit.win = '@arba open_card arba change card'
hermit.lose = '@lose 1 follower/skip move/'


sorcerer = NPC()
sorcerer.name = "Sorcerer"
sorcerer._type = 'wizard'
sorcerer.intelligence = 8
sorcerer.strength = 9
sorcerer.glory = 7
sorcerer.win = '@1 item of choice'
sorcerer.lose1 = '@encounter'
sorcerer.lose2 = '@lose 2 items/skip 2 moves'


baba_yaga = NPC()
baba_yaga.name = "Baba Yaga"
baba_yaga._type = 'wizard'
baba_yaga.intelligence = 7
baba_yaga.win = '@1 item(magical/common) of choice'
baba_yaga.lose = '@lose 1 follower/lose 1 glory card'

loner = NPC()
loner.name = "The Loner"
loner._type = 'wizard'
loner.intelligence = 6
loner.win = '@arba open_card arba change card'
loner.lose = '@lose 1 item/skip move/'


mavka = NPC()
mavka.name = "Mavka"
mavka._type = 'water creature'
mavka.intelligence = 6
mavka.win = '@lookup card'
mavka.lose = '@lose 1 glory card'


anchutka = NPC()
anchutka.name = "Anchutka"
anchutka._type = 'water creatur'
anchutka.intelligence = 7
anchutka.win = '@change other position'
anchutka.lose = '@change position, chooses your opponent from the right'


mermaid = NPC()
mermaid.name = "Mermaid"
mermaid._type = 'water creature'
mermaid.intelligence = 8
mermaid.win = '@+1 item (magical/common)/(iz ruk - ka cia reiskia?)'
mermaid.lose = '@lose 1 follower/lose 2 glory cards'


kikimora = NPC()
kikimora.name = "Kikimora"
kikimora._type = 'water creature'
kikimora.strength = 7
kikimora.glory = 5
kikimora.win = '@change other position'
kikimora.lose = '@lose 1 item/skip move'



merman = NPC()
merman.name = "Merman"
merman._type = 'water creature'
merman.intelligence = 9
merman.win = '@change position'
merman.lose = '@change position, chooses your opponent from the right'


indrik = NPC()
indrik.name = "Indrik Beast"
indrik._type = 'monster'
indrik.strength = 9
indrik.glory = 7
indrik.win = '@lookup card'
indrik.lose = '@lose 1 follower/lose 1 glory card/'

direwolf = NPC()
direwolf.name = "Direwolf"
direwolf._type = 'monster'
direwolf.strength = 6
direwolf.glory = 4
direwolf.win = '@1 item common/magical'
direwolf.lose = '@lose 1 follower/lose 1 glory card'


volot = NPC()
volot.name = "Volot"
volot._type = 'monster'
volot.strength = 9
volot.glory = 7
volot.win = '@1 item weapon'
volot.lose = '@lose 1 follower/lose 1 glory card'


werewolf = NPC()
werewolf.name = "Werewold"
werewolf._type = 'monster'
werewolf.strength = 7
werewolf.glory = 5
werewolf.win = '@1 item common/magical'
werewolf.lose = '@lose 1 follower/lose 1 glory card'


goblin = NPC()
goblin.name = "Golin"
goblin._type = 'monster'
goblin.strength = 8
goblin.glory = 6
goblin.win = '@1 item magical'
goblin.lose = '@change position, chooses your opponent from the right'



centaur = NPC()
centaur.name = "Centaur"
centaur._type = 'monster'
centaur.strength = 6
centaur.glory = 4
centaur.win = '@1 item common/magical'
centaur.lose = '@lose 1 follower/lose 1 glory card'


snake_dragon = NPC()
snake_dragon.name = "Snake Dragon"
snake_dragon._type = 'monster'
snake_dragon.strength = 9
snake_dragon.glory = 7
snake_dragon.win = '@1 item any'
snake_dragon.lose = '@lose 1 follower/lose 1 glory card'

pirates1 = NPC()
pirates1.name = "Furious Pirates"
pirates1._type = 'bandit'
pirates1.strength = 7
pirates1.glory = 5
pirates1.win = None
pirates1.lose = '@lose 1 item/lose 1 follower/lose 1 glory card'


pirates2 = NPC()
pirates2.name = "Pirates"
pirates2._type = 'bandit'
pirates2.strength = 6
pirates2.glory = 4
pirates2.win = None
pirates2.lose = '@lose 1 item (common/weapon)/lose 1 follower'


city_bandits = NPC()
city_bandits.name = "City Bandits"
city_bandits._type = 'bandit'
city_bandits.strength = 5
city_bandits.glory = 3
city_bandits.win = None
city_bandits.lose = '@lose 1 item (common/weapon)/skip move'


horseback_robbers = NPC()
horseback_robbers.name = "Horseback Robbers"
horseback_robbers._type = 'bandit'
horseback_robbers.strength = 7
horseback_robbers.glory = 5
horseback_robbers.win = None
horseback_robbers.lose = '@lose 1 item/lose 1 follower/skip move'


robbers = NPC()
robbers.name = "Robbers"
robbers._type = 'bandit'
robbers.strength = 6
robbers.glory = 4
robbers.win = None
robers.lose = '@lose 1 item (common/weapon)/skip move'


muggers = NPC()
muggers.name = "Muggers"
muggers._type = 'bandit'
muggers.strength = 5
muggers.glory = 3
muggers.win = None
muggers.lose = '@lose 1 item (common/weapon)/lose 1 follower'


ghoul = NPC()
ghoul.name = "Ghoul"
ghoul._type = 'undead'
ghoul.strength = 8
ghoul.glory = 5
ghoul.win = '@1 item (magical)'
ghoul.lose = '@lose 1 follower/lose 1 glory card'


vampire = NPC()
vampire.name = "Vampire"
vampire._type = 'undead'
vampire.strength = 7
vampire.glory = 4
vampire.win = None
vampire.lsoe = '@-1 follower/-2 moves'

ghost = NPC()
ghost.name = "Ghost"
ghost._type = 'undead'
ghost.strength = 9
ghost.glory = 7
ghost.win = None
ghost.lose = '@change position by oth player from rigth'


wraith = NPC()
wraith.name = "Wraith"
wraith._type = 'undead'
wraith.strength = 6
wraith.glory = 4
wraith.win = None
wraith.lose = '@-1 move'




ancestor_ghost = NPC()
ancestor_ghost.name = "Ancestor ghost"
ancestor_ghost._type = 'undead'
ancestor_ghost.win/lose - '@@fja apibrezti'


koscei = NPC()
koscei.name = "Koschei the Deathless"
koscei._type = 'undead'
koscei.strength = 10
koscei.glory = 8
koscei.win = '@arba 2 magical items arba 2 followers'
koscei.lose = '@-1 follower/-2 glory cards/-3 magical items'





#FollowerObjects


warrior = Follower()
warrior.name = "Warrior"
warrion._type = 'follower'
warrior.hire = [1, 'item']
warrior.gives = '@+1 jegos musyje'

hero = Follower()
hero.name = "Hero"
hero._type = 'follower'
hero.hire = [1, 'item']
hero.gives = '@+1 jegos musyje'


fortune_teller = Follower()
fortune_teller.name = "Fortune-Teller"
fortune_teller._type = 'follower'
fortune_teller.hire = [2, 'item']
fortune_teller.gives = '@+1 proto pokalbiai'


wanderer = Follower()
wanderer.name = "Wanderer"
wanderer._type = 'follower'
wanderer.hire = [1, 'item']
wanderer.gives = '@+1 proto su burtininkais. Su undead pabega'


mage = Follower()
mage.name = "Mage"
mage._type = 'follower'
mage.hire = [1, 'item']
mage.gives = '@+1 proto pokalbiai'


translator = Follower()
translator.name = "Translator"
translator._type = 'follower'
translator.hire = [1, 'item']
translator.gives = '@+1 proto pokalbiai'

woodcutter = Follower()
woodcutter.name = "Woodcutter"
woodcutter._type = 'follower'
woodcutter.hire = [1, 'item']
woodcutter.gives = '@+1 jegos ant kortos'


pathfinder = Follower()
pathfinder.name = "Pathfinder"
pathfinder._type = 'follower'
pathfinder.hire = [1, 'item']
pathfinder.gives = '@+1 proto ant kortos'


ex_convict = Follower()
ex_convict.name = "Ex-convict"
ex_convict._type = 'follower'
ex_convict.hire = [1, 'item']
ex_convict.gives = '@+1 jegos musyje. Su plesikais pereina pas juos, jiems +1 jegos'


sorcerer = Follower()
sorcerer.name = "Sorcerer"
sorcerer._type = 'follower'
sorcerer.hire = [2, 'item']
sorcerer.gives = '@+1 proto ant kortos'


princess = Follower()
princess.name = "Princess"
princess._type = 'follower'
princess.hire = [1, 'item', 'magical']
princess.gives = '@susikalbeti su Knight. Bet po to palieka jus'





#MissionObjects

mission1 = Mission()
mission1.name = 'mission1'
mission1._type = 'mission'
mission1.condition = '@nugaleti bandit'
mission1.glory = 3


mission2 = Mission()
mission2.name = 'mission2'
mission2._type = 'mission'
mission2.condition = '@ieiti Magical Field'
mission2.glory = 4


mission3 = Mission()
mission3.name = 'mission3'
mission3._type = 'mission'
mission3.condition = '@nugaleti monster'
mission3.glory = 3



mission4 = Mission()
mission4.name = 'mission4'
mission4._type = 'mission'
mission4.condition = '@ieiti Seven Oaks'
mission4.glory = 4


mission5 = Mission()
mission5.name = 'mission5'
mission5._type = 'mission'
mission5.condition = '@gauti 2 weapons'
mission5.glory = 3



mission6 = Mission()
mission6.name = 'mission6'
mission6._type = 'mission'
mission6.condition = '@nugaleti 2 magical items'
mission6.glory = 3



mission7 = Mission()
mission7.name = 'mission7'
mission7._type = 'mission'
mission7.condition = '@have 3 followers'
mission7.glory = 6



mission8 = Mission()
mission8.name = 'mission8'
mission8._type = 'mission'
mission8.condition = '@nugaleti undead'
mission8.glory = 3





#ItemObjects


charter = Item()
charter.name = "Charter"
charter._type = 'common'
charter.gives = '@pokalbis be kauliuko'
charter.char_specific = '@witch negali'
charter.glory = 2

crown = Item()
crown.name = "Crown"
crown._type = 'common'
crown.gives = '@isvengti praradimo glory'
crown.char_specific = '@scout negali'
crown.glory = 2

honey_beer = Item()
honey_beer.name = "Honey Beer"
honey_beer._type = 'common'
honey_beer.gives = '@other skips move'
honey_beer.glory = 2


ale = Item()
ale.name = "Ale"
ale._type = 'common'
ale.gives = '@other skips move'
ale.glory = 2




gold1 = Item()
gold1.name = "A Bag of Gold"
gold1._type = 'common'
gold1.gives = '@susitikes su citizen bet koki daikta is kalades paimt'
gold1.glory = 1

gold2 = Item()
gold2.name = "Gold coins"
gold2._type = 'common'
gold2.gives = '@susitikes su citizen bet koki daikta is kalades paimt'
gold2.glory = 1


gold3 = Item()
gold3.name = "Golden statue"
gold3._type = 'common'
gold3.gives = '@susitikes su citizen bet koki daikta is kalades paimt'
gold3.glory = 1


hood = Item()
hood.name = "Hood"
hood._type = 'common'
hood.gives = '@+2 su wizard'
hood.glory = 1
hood.reusable = True


horn = Item()
horn.name = "Horn"
horn._type = 'common'
horn.gives = '@bet koki NPC bet kur pastatyti'
horn.glory = 2





shield1 = Item()
shield1.name = "Iron Shield"
shield1._type = 'weapon'
shield1.gives = '@+1 jegos musyje'
shield1.char_specific = '@be shield daugiau tik 1 ginklas'
shield1.glory = 1
shield1.reusable = True


shield2 = Item()
shield2.name = "Steel Shield"
shield2._type = 'weapon'
shield2.gives = '@+1 jegos musyje'
shield2.char_specific = '@be shield daugiau tik 1 ginklas'
shield2.glory = 1
shield2.reusable = True






shield3 = Item()
shield3.name = "Ebony Shield"
shield3._type = 'weapon'
shield3.gives = '@+1 jegos musyje'
shield3.char_specific = '@be shield daugiau tik 1 ginklas'
shield3.glory = 1
shield3.reusable = True




cuirass1 = Item()
cuirass1.name = "Iron Cuirass"
cuirass1._type = 'weapon'
cuirass1.gives = '@atsaukti pralosta musi'
cuirass1.char_specific = '@be cuirass dar 2 ginklai'
cuirass1.glory = 2
cuirass1.reusable = True





cuirass2 = Item()
cuirass2.name = "Steel Cuirass"
cuirass2._type = 'weapon'
cuirass2.gives = '@atsaukti pralosta musi'
cuirass2.char_specific = '@be cuirass dar 2 ginklai'
cuirass2.glory = 2
cuirass2.reusable = True


spear1 = Item()
spear1.name = "Spear"
spear1._type = 'weapon'
spear1.gives = '@+1 jegos musyje'
spear1.char_specific = '@negali 2 ietys buti'
spear1.glory = 1
spear1.reusable = True



spear2 = Item()
spear2.name = "Lance"
spear2._type = 'weapon'
spear2.gives = '@+1 jegos musyje'
spear2.char_specific = '@negali 2 ietys buti'
spear2.glory = 1
spear2.reusable = True


club = Item()
club.name = "Club"
club._type = 'weapon'
club.gives = '@isvengia bandits'
club.char_specific = '@archer cant use it'
club.glory = 1
club.reusable = True


sword1 = Item()
sword1.name = "Elven Sword"
sword1._type = 'weapon'
sword1.gives = '@+1 jegos musyje'
sword1.char_specific = '@be kardo gali tik 1 ginklas buti'
sword1.glory = 1
sword1.reusable = True

sword2 = Item()
sword2.name = "Glass Sword"
sword2._type = 'weapon'
sword2.gives = '@+1 jegos musyje'
sword2.char_specific = '@be kardo gali tik 1 ginklas buti'
sword2.glory = 1
sword2.reusable = True


sword3 = Item()
sword3.name = "Dwarwen Sword"
sword3._type = 'weapon'
sword3.gives = '@+1 jegos musyje'
sword3.char_specific = '@be kardo gali tik 1 ginklas buti'
sword3.glory = 1
sword3.reusable = True



mirror1 = Item()
mirror1.name = "Mirror"
mirror1._type = 'magical'
mirror1.gives = '@lookup card'
mirror1.char_specific = '@merchant negali'
mirror1.glory = 2


mirror2 = Item()
mirror2.name = "Broken Mirror"
mirror2._type = 'magical'
mirror2.gives = '@lookup card'
mirror2.char_specific = '@merchant negali'
mirror2.glory = 2


potion1 = Item()
potion1.name = "Magic Potion"
potion1._type = 'magical'
potion1.gives = '@atsaukti follower praradima'
potion1.glory = 2



potion2 = Item()
potion2.name = "Potion of Health"
potion2._type = 'magical'
potion2.gives = '@atsaukti follower praradima'
potion2.glory = 2



potion3 = Item()
potion3.name = "Potion of Restoration"
potion3._type = 'magical'
potion3.gives = '@atsaukti follower praradima'
potion3.glory = 2



amulet1 = Item()
amulet1.name = "Silver Necklase"
amulet1._type = 'magical'
amulet1.gives = '@pabegti nuo monster arba undead'
amulet1.glory = 2



amulet2 = Item()
amulet2.name = "Amulet"
amulet2._type = 'magical'
amulet2.gives = '@pabegti nuo monster arba undead'
amulet2.glory = 2



amulet3 = Item()
amulet3.name = "Gold Necklace"
amulet3._type = 'magical'
amulet3.gives = '@pabegti nuo monster arba undead'
amulet3.glory = 2





golden_horn = Item()
golden_horn.name = "Golden Horn"
golden_horn._type = 'magical'
golden_horn.gives = '@Padekite follower is ranku bet kada'
golden_horn.glory = 2



harp1 = Item()
harp1.name = "Wooden Harp"
harp1._type = 'magical'
harp1.gives = '@atsaukti paskutini pokalbi'
harp1.glory = 2



harp2 = Item()
harp2.name = "Golden Harp"
harp2._type = 'magical'
harp2.gives = '@atsaukti paskutini pokalbi'
harp2.glory = 2



invisible_hat = Item()
invisible_hat.name = "Invisible Hat"
invisible_hat._type = 'magical'
invisible_hat.gives = '@+4 jegos musyje arba pabegti nuo musio'
invisible_hat.char_specific = '@Viking negali'
invisible_hat.glory = 2





mask1 = Item()
mask1.name = "Mask"
mask1._type = 'magical'
mask1.gives = '@+1 proto pokalbiuose'
mask1.glory = 1
mask1.reusable = True


mask2 = Item()
mask2.name = "Secret Mask"
mask2._type = 'magical'
mask2.gives = '@+1 proto pokalbiuose'
mask2.glory = 1
mask2.reusable = True










magic_carpet = Item()
magic_carpet.name = "Magic Carpet"
magic_carpet._type = 'magical'
magic_carpet.gives = '@Jei nera followers ir ne daugiau 2 daiktu be kilimo, vietoj ejimo i kita uzversta korta persimesti'
magic_carpet.glory = 1
magic_carpet.reusable = True






sorcerer_hat = Item()
sorcerer_hat.name = "Sorcerer Hat"
sorcerer_hat._type = 'magical'
sorcerer_hat.gives = '@+1 proto visur'
sorcerrer_hat.char_specific = '@sage cannot use'
sorcerer_hat.glory = 1
sorcerer_hat.reusable = True






charm = Item()
charm.name = "Charm"
charm._type = 'magical'
charm.gives = '@+1 jegos ir proto susitikus su undead'
charm.glory = 1
charm.reusable = True


'''









global cards

cards = [lair, thicket, mound, bonfire, backwoods, pitfall, inn, mushroom_field, hut, fern_field, lake, mountains, well, backwater, grove, idol, berry_field, terem, town, swamp, crossroads, magical_field, cave, stone_altar, seven_oaks, precipice, graveyard, oblivion, death_trap, enchanted_field]




def setup():


    game_engine.intro()

    game_engine.choices()

    print "\nGame continues...\n"




def gameplay():


    game_engine.change_player()


    print playername[0], "\b,", "your move"

    global position

    position = random.choice(game_map.poslist)

    game_engine.prompt()

    game_map.mapdict[position].entrance()

    game_engine.prompt()

    gameplay()





game_engine = Engine()
game_map = Map()
game_inventory = Inventory()


setup()

game_map.buildmap()


gameplay()



