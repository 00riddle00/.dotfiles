import random
from sys import exit




class Mission(object):

    def __init__(self):
        self.condition = "pass"
        self.glory = "pass"
        self.is_completed = False
        self.in_hands = False



class Follower(object):

    def __init__(self):
        self.name = "pass"
        self.hire = "pass"
        self.gives = "pass"

        self.is_hired = False
        self.in_hands = False




class NPC(object):

    def __init__(self):
        self.name = "pass"
        self._type = "pass"
        self.strength = "pass"
        self.intelligence = "pass"
        self.glory = "pass"
        self.additional = "pass"

        self.win = "pass"
        self.lose = "pass"

        self.is_alive = False








class Item(object):


    def __init__(self):
        self.name = "pass"
        self._type = "pass"
        self.gives = "pass"
        self.char_specific = "pass"
        self.glory = "pass"

        self.reusable = False
        self.used = False
        self.in_use = False


    def use(self):
        pass




class Field(object):

    def __init__(self):
        self.position = "pos.."
        self.is_open = False
        self.name = "name.."
        self.description = "description..."
        self.margin = []
        self.char_specific = "char specific..."


    def get_mission(self):
        if self.name == "Hut":
            game_engine.give_mission()
        if self.name == "Terem":
            game_engine.give_mission()


    def change_items(self):
        if self.name == "Inn":
            game_engine.exchange_2_1()
        if self.name == "Hut":
            game_engine.exchange_2_1()
        if self.name == "Idol":
            game_engine.exchange_follower_for_item()
        if self.name == "Terem":
            game_engine.exchange_1_1()






    def hiring(self):
        if self.name == "Bonfire":
            game_engine.hiring()
        elif self.name == "Inn":
            game_engine.hiring()
        elif self.name == "Well":
            game_engine.hiring_free()
        elif self.name == "Backwater":
            game.engine.hiring()
        elif self.name == "Terem":
            game.engine.hirinh()
        else:
            return(False)





    def entrance_perks(self):

        global m1

        if playername[1] == 'scout' and self.name == "Mound":
            print "Scout knowns how not to lost track in such places. His strength is equal to 6 in entering the mound"
            m1 = 6

            game_engine.dice()

            m1 = m1 + m


        elif playername[1] == 'sage' and self.name == "Terem":
            print "Kiev sage is no stranger to such places, and thus he receives a total of 6 points of intelligence before entering Terem."

            m1 = 6

            game_engine.dice()

            m1 = m1 + m


        else:

            game_engine.dice()

            m1 = m + 3 #personazo jega



    def special(self):
        if self.name == "Lake":
            game_map.lookup()



    def pre_entrance_fine(self):
        if self.name == "Inn":
            print "If your intelligence (including items and followers) is less than 4, you lose 1 item.\n"
            #if steitmentas
            print "You lose 1 item. Choose which.\n"
            #lose_item()
            #else:
            print "Your intelligence is (self.intelligence), you keep your items to yourself.\n"
        else:
            return(False)


    def entrance_fine(self):
        if self.name == "Thicket":
            print "You have lost track...\n"
            game_engine.skip_move()
        elif self.name == "Pitfall":
            print "You fell into a pitfall. You lose one follower. If there is not any, you skip 2 moves until you finally get yourself on the ground"
            #pirma su sputnikais sutvarkyti ,if not sputnik:
            game_engine.skip_2_moves()
        elif self.name == "Well":
            game_inventory.remove()
        elif self.name == "Grove":
            game_engine.skip_move()
        else:
            return(False)


    def entrance(self):


        print "\nWelcome to", self.name, "\b!\n"
        self.is_open = True
        print "Entrance: dice +", self.margin[1], "not less than", self.margin[0]


        self.pre_entrance_fine()

        self.entrance_perks()



        if m1 >= self.margin[0]:
            print "You have entered", self.name, "\b!"
            self.entered = True

            print self.description


            self.hiring()

            self.change_items()

            self.get_mission()

            self.special()

        else:
            print "You did not enter."
            self.entered = False
            self.entrance_fine()



    def encounter(self):
        #encounter additional f-ja ("mushroom field", "berry field"
        pass

    def findings(self):
        #findings additional fja (even nr, "mushroom field", "berry field"
        pass

    def exchange(self):
        pass

    def action(self):
        pass

    def mission(self):
        pass



class Inventory(object):

    def __init__(self):
        self.inv = []

        self.in_hands = False

    def add(self):
        pass

    def remove(self):
        print playername[0], "loses 1 item"

    def has(self):
        pass

    def list(self):
        pass

    def describe(self):
        pass


    def hiring(self):
        pass

    def add_NPC(self):
        pass

    def exchange(self):
        pass











class Card_Deck(object):

    def shuffle(self):
        pass

    def getcard(self):
        pass

    def placecard(self):
        pass

    def give_mission(self):
        pass

    def give_follower(self):
        pass

    def give_item(self):
        pass













class Character(object):

    def __init__(self, name):
        self.name = name
        self.strength = 0
        self.intelligence = 0
        #self.description
        #self.strength
        #self.intelligence

    def info(self):
        print "\n", self.name, "\nName:", playername[0], "\n\nStrength:", self.strength, "\nIntelligence:", self.intelligence
        print self.description, "\n"







class Map(object):

    def buildmap(self):

        if player4 == False:
            if player3 == False:
                self.cards = "16"
            else:
                self.cards = "20"
        else:
            self.cards = "25"







    def lookup(self):
        print playername[0], "can lookup a card of choice in the map."

    def change_card(self):
        pass

    def change_my_position(self):
        pass

    def change_other_position(self):
        pass














class Engine(object):


    def __init__(self):

        self.p1 = 1
        self.p2 = 1
        self.p3 = 1
        self.p4 = 1
        self.p5 = 1
        self.p6 = 1



    def dice_loop(self):

        self.i = 1

        while self.i < 7:

            print "\r%d" % self.i,

            self.i += 1


    def dice(self):

        raw_input("Roll a dice(Enter) > ")

        for self.ii in range(1,50000):
            self.dice_loop()
        self.ii = random.randint(1,6)
        print "\r%d" %self.ii
        self.m = self.ii
        global m
        m = self.m

    def characters_description(self):

        print '''

Charater descriptions: character_descriptions.py (import later)

        '''


    def change_player(self, nr):
        self.nr = nr
        global playername
        playername = []


        if self.nr == 1:
            playername = [player1]
        if self.nr == 2:
            playername = [player2]
        if self.nr == 3:
            playername = [player3]
        if self.nr == 4:
            playername = [player4]
        if self.nr == 11:
            playername = playername1
        if self.nr == 12:
            playername = playername2
        if self.nr == 13 and player3:
            playername = playername3
        if self.nr == 14 and player4:
            playername = playername4


        return playername











    def intro(self):

        global player1, player2, player3, player4
        global player_nr

        print "Welcome to The Treacherous Forest!"

        print "How many people are playing?"



        player_nr = input("> ")

        while player_nr not in range(2,5):
            print "The number of players should be from 2 to 4!"
            player_nr = input("> ")


        if player_nr == 2:
            player1 = raw_input("Blue player> ")
            player2 = raw_input("Green player> ")
            player3 = False
            player4 = False
        elif player_nr == 3:
            player1 = raw_input("Blue player> ")
            player2 = raw_input("Green player> ")
            player3 = raw_input("Red player> ")
            player4 = False
        else:
            player1 = raw_input("Blue player> ")
            player2 = raw_input("Green player> ")
            player3 = raw_input("Red player> ")
            player4 = raw_input("Yellow player> ")

        #print the list of players
        print "\nPlayer(1):", player1, "\nPlayer(2):", player2
        if player3:
            print "Player(3):", player3
        if player4:
            print "Player(4):", player4




        self.proceed = raw_input("\nContinue(y/n)? ")

        if self.proceed == "y" or self.proceed == "Y" or self.proceed == "yes" or self.proceed == "Yes":
            print "\nGood luck!\n"
        else:
            exit(1)




    def congrats(self):



        self.sp = playername[0] + ", congratulations, you have chosen"

        if playername[1] == 'scout':
            print self.sp, "Pecheneg Scout!"
        if playername[1] == "merchant":
            print self.sp, "Swedish Merchant!"
        if playername[1] == "sage":
            print self.sp, "Kiev Sage!"
        if playername[1] == "viking":
            print self.sp, "Visitant Viking!"
        if playername[1] == "archer":
            print self.sp, "Chernigov Archer!"
        if playername[1] == "witch":
            print self.sp, "Steppe Witch-doctor!"

        self.manual1 = ("\nPress \"info\" to read character's description\nPress \"inv\" to check your inventory"
                "\nPress \"map\" to view map"
                "\nPress \"continue\" to continue the game")

        print self.manual1



    def choosing(self):

        if playername[0] == player1:
            print "\nBlue player(" + player1, "\b): choose your character!"
        if playername[0] == player2:
            print "\nGreen player(" + player2, "\b): choose your character!"
        if playername[0] == player3:
            print "\nRed player(" + player3, "\b): choose your character!"
        if playername[0] == player4:
            print "\nYellow player(" + player4, "\b): choose your character!"



        print '''
1.Pecheneg Scout
2.Swedish Merchant
3.Kiev Sage
4.Visitant Viking
5.Chernigov Archer
6.Steppe Witch-doctor

Detailed description(d)

'''

        self.choice = raw_input("> ")




        if self.choice == "1" or self.choice == "scout" or self.choice == "Scout":
            if self.p1 == 1:

                playername.append('scout')

                scout.strength += 3
                scout.intelligence += 3


                scout.description = ('''
                \n+1 with Citizens\n-1 with Monsters
                \nAbility to hire any fellow traveler for 1 item
                ''')
                self.congrats()


                self.p1 += 1


            else:
                print "Pecheneg Scout is already taken!\n", 20 * "_"
                self.choosing()
                return(False)




        if self.choice == "2" or self.choice == "merchant" or self.choice == "Merchant":
            if self.p2 == 1:

                playername.append('merchant')

                merchant.strength += 3
                merchant.intelligence += 3

                merchant.description = ('''
                \n+1 with Citizens\n-1 with Undead
                \nThe Translator is hired for free
                ''')


                self.congrats()


                self.p2 += 1

            else:
                print "Swedish Merchant is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "3" or self.choice == "sage" or self.choice == "Sage":
            if self.p3 == 1:
                playername.append('sage')

                sage.strength += 2
                sage.intelligence += 4

                sage.description = ('''
                \n +1 with Wizards\n-1 with Water Creatures
                \nFortune-teller is hired for free
                ''')


                self.congrats()

                self.p3 += 1

            else:
                print "Kiev Sage is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "4" or self.choice == "viking" or self.choice == "Viking":
            if self.p4 == 1:

                playername.append('viking')

                viking.strength += 4
                viking.intelligence += 2

                viking.description = ('''
                \n-1 with Wizards
                \nEx-convict is hired for free
                ''')


                self.congrats()

                self.p4 += 1

            else:
                print "Visiting Viking is already taken!\n", 20 * "_"

                self.choosing()
                return(False)

        if self.choice == "5" or self.choice == "archer" or self.choice == "Archer":
            if self.p5 == 1:


                playername.append('archer')

                archer.strength += 3
                archer.intelligence += 3

                archer.description = ('''
                \n+1 with Bandits\n-1 with Undead
                \nWarrior is hired for free
                ''')

                self.congrats()

                self.p5 += 1

            else:
                print "Chernigov Archer is already taken!\n", 20 * "_"
                self.choosing()
                return(False)

        if self.choice == "6" or self.choice == "witch" or self.choice == "Witch":
            if self.p6 == 1:

                playername.append('witch')

                witch.strength += 2
                witch.intelligence += 4

                witch.description = ('''

                \nSorcerer is hired for free
                ''')

                self.congrats()

                self.p6 += 1

            else:
                print "Steppe Witch-doctor is already taken!\n", 20 * "_"
                self.choosing()
                return(False)

        if self.choice == "d" or self.choice == "D":
            self.characters_description()
            raw_input("(Continue?) > ")
            print self.p1, "TEST2"
            self.choosing()


        #else:
        #    self.parse_fail()
        #    print "\n", 20 * "_ "
        #    self.choosing()



    def menu_commands(self):
        if action == "info":
            if playername[1] == 'scout':
                scout.info()
            if playername[1] == 'merchant':
                merchant.info()
            if playername[1] == 'sage':
                sage.info()
            if playername[1] == 'viking':
                viking.info()
            if playername[1] == 'archer':
                archer.info()
            if playername[1] == 'witch':
                witch.info()



            else:
                return(False)


        if action == "inv" or action == "i":
            print "\nYour inventory: \n\n"


        if action == "map":
            print "MAP..."



        if action == "rules":
            print "self.rules()..."


        if action == "use item":
            print "inv_use()..."






    def choices(self):

        self.change_player(1)

        self.choosing()
        self.prompt()

        global playername1
        playername1 = playername[:]

        self.change_player(2)
        self.choosing()
        self.prompt()

        global playername2
        playername2 = playername[:]


        if player3:
            self.change_player(3)
            self.choosing()
        else:
            return (False)

        if player3:
            global playername3
            playername3 = playername[:]


        self.prompt()


        if player4:
            self.change_player(4)
            self.choosing()
        else:
            return (False)

        if player4:
            global playername4
            playername4 = playername[:]


        self.prompt()

        return playername1, playername2, playername3, playername4






    def prompt(self):
        global action
        action = raw_input("> ")
        self.menu_commands()
        if action == "continue" or action == "c":
            return(False)
        else:
            self.prompt()

    def parse(self, action):
        print "parsing..."


    def parse_fail(self):
        print "\nparse fail"
        return(False)

    def use_fail(self):
        print "use fail..."


    def skip_move(self):
        print playername[0], "skips 1 move"

    def skip_2_moves(self):
        print playername[0], "skips 2 moves"

    def players_meet(self):
        pass

    def give_mission(self):
        print playername[0], "gets a new mission."


    def hiring(self):
        print playername[0], "can hire a follower here."

    def hiring_free(self)
        print playername[0], "can hire a follower for free."


    def exchange_1_1(self):
        print playername[0], "can exchange 1 item"


    def exchange_2_1(self):
        print playername[0], "can exchange 2 items to 1"

    def exchange_follower_for_item(self):
        print playername[0], "can exchange a follower for 1 item (any)"



    def encounter(self):
        pass

    def move_into(self):
        pass

    def move_fail(self):
        pass

    def rules(self):
        pass

    def simulate_play(self):
        pass


    def endgame(self):
        print "endgame..."







#CharObjects

scout = Character("Pecheneg Scout")
merchant = Character("Swedish Merchant")
sage = Character("Kiev Sage")
viking = Character("Visitant Viking")
archer = Character("Chernigov Archer")
witch = Character("Steppe Witch-doctor")



#FieldObjects

lair = Field()
lair.position = None
lair.name = "Lair"
lair.description = "You see a suspicious looking Lair."
lair.margin = [6, 'strength']
lair.encounter = ['monster', 'bandit']
lair.findings = [1, 'item', 'any']


thicket = Field()
thicket.position = None
thicket.name = "Thicket"
thicket.description = "You see a thick group of trees"
thicket.margin = [6, 'strength']
thicket.encounter = [None]
thicket.findings = [1, 'item', 'any']


mound = Field()
mound.position = None
mound.name = "Mound"
mound.description = "You see a mound with many skulls and weapons on top. An uncomfortable wind makes you shiver."
mound.margin = [8, 'strength']
mound.encounter = ['undead','wizard']
mound.findings = [1, 'item', 'magical', 'weapon']


bonfire = Field()
bonfire.position = None
bonfire.name = "Bonfire"
bonfire.description = "You approach a huge bonfire. You start to see strange people around it"
bonfire.margin = [6, 'intelligence']
bonfire.encounter = ['bandit', 'citizen']
bonfire.findings = None


backwoods = Field()
backwoods.position = None
backwoods.name = "Backwoods"
backwoods.description = "You see backwoods."
backwoods.margin = [5, 'strength']
backwoods.encounter = ['monster', 'bandit']
backwoods.findings = [1, 'item', 'common', 'weapon']


pitfall = Field()
pitfall.position = None
pitfall.name = "Pitfall"
pitfall.description = "You have successfully avoided a dangerous pitfall, and stand near the edge of it."
pitfall.margin = [7, 'intelligence']
pitfall.encounter = None
pitfall.findings = [1, 'item', 'magical']


inn = Field()
inn.position = None
inn.name = "Inn"
inn.description = "You approad a cosy looking inn."
inn.margin = [5, 'intelligence']
inn.encounter = ['citizen']
inn.findings = None


mushroom_field = Field()
mushroom_field.position = None
mushroom_field.name = "Mushroom Field"
mushroom_field.description = "You approach a mushroom field with many strange looking mushrooms growing everywhere"
mushroom_field.margin = [6, 'intelligence']
mushroom_field.encounter = ['citizen', 'monster']
mushroom_field.findings = [1, 'item', 'any']

hut = Field()
hut.position = None
hut.name = "Hut"
hut.description = "You approach a hut."
hut.margin = [5, 'strength']
hut.encounter = ['bandit', 'wizard']
hut.findings = None


fern_field = Field()
fern_field.position = None
fern_field.name = "Fern Field"
fern_field.description = "You approach a fern field."
fern_field.margin = [5, 'strength']
fern_field.encounter = ['monster']
fern_field.findings = [1, 'item', 'magical']


lake = Field()
lake.position = None
lake.name = "Lake"
lake.description = "You approach a wide lake."
lake.margin = [7, 'intelligence']
lake.encounter = None
lake.findings = None


mountains = Field()
mountains.position = None
mountains.name = "Mountains"
mountains.description = "You approach steep rocky mountains."
mountains.margin = [6, 'intelligence']
mountains.encounter = ['monster']
mountains.findings = [1, 'item', 'common', 'magical', 'follower']


well = Field()
well.position = None
well.name = "Well"
well.description = "You approach a lonely well."
well.margin = [8, 'intelligence']
well.encounter = ['water creature']
well.findings = None


backwater = Field()
backwater.position = None
backwater.name = "Backwater"
backwater.description = "You approach a backwater."
backwater.margin = [5, 'intelligence']
backwater.encounter = ['water creature']
backwater.findings = None


grove = Field()
grove.position = None
grove.name = "Well"
grove.description = "You approach a grove. The fast wind is moving the trees."
grove.margin = [7, 'strength']
grove.encounter = None
grove.findings = [1, 'item', 'common', 'weapon']


idol = Field()
idol.position = None
idol.name = "Idol"
idol.description = "You approach a lonely idol of some god."
idol.margin = [7, 'strength']
idol.encounter = ['wizard']
idol.findings = None



berry_field = Field()
berry_field.position = None
berry_field.name = "Berry Field"
berry_field.description = "You approach a berry field."
berry_field.margin = [7, 'intelligence']
berry_field.encounter = ['monster', 'citizen', 'bandit']
berry_field.findings = [1, 'follower']




terem = Field()
terem.position = None
terem.name = "Terem"
terem.description = "You approach a big russian Terem."
terem.margin = [8, 'intelligence']
terem.encounter = ['citizen', 'wizard']
terem.findings = None








game_engine = Engine()
game_map = Map()
game_inventory = Inventory()


def setup():


    game_engine.intro()

    game_engine.choices()

    print "\nGame continues...\n"


setup()

def moves():

    game_engine.change_player(11)

    print playername[0], "\b," + '''
    You are entering the forest. You have only a compass with yourself, and
    nothing more. You have made a map of the forest in your mind, by using
    letters and numbers. Currently you define your position as A1
    '''

    game_engine.prompt()

    print "game continues"

    lake.entrance()

    game_engine.prompt()

    game_engine.change_player(12)

    print playername[0], "\b,", "your move."

    game_engine.prompt()

moves()







